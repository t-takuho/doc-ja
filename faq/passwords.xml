<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f012b2761819e0ab25ff8cf4bac6655cfbc6fcff Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->
 <chapter xml:id="faq.passwords" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>安全に、かつセキュアにパスワードをハッシュする</title>
  <titleabbrev>パスワードのハッシュ</titleabbrev>
  
  <simpara>
   この節では、なぜハッシュ関数を使ってパスワードを守るのかについての理由と、
   ハッシュ処理を効率的に行う方法について説明します。
  </simpara>
  
  <qandaset>
   <qandaentry xml:id="faq.passwords.hashing">
    <question>
     <simpara>
      なぜ、アプリケーションのユーザーが登録したパスワードをハッシュしなければならないのですか?
     </simpara>
    </question>
    <answer>
     <simpara>
      パスワードのハッシュは、最も基本的なセキュリティ要件のひとつです。
      ユーザーからパスワードを受け取るアプリケーションやサービスを設計するときには必ず考慮しなければなりません。
      ハッシュしなければ、パスワードを格納したデータストアが攻撃を受けたときにパスワードを盗まれてしまいます。
      それは即時にアプリケーションやサービスが乗っ取られることにつながるし、
      もしそのユーザーが他のサービスでも同じアカウント・同じパスワードを使っていればさらに被害が大きくなります。
     </simpara>
     <simpara>
      ユーザーのパスワードにハッシュアルゴリズムを適用してからデータベースに格納しておくと、
      攻撃者が元のパスワードを知ることが難しくなります。
      とはいえ、パスワードのハッシュ結果との比較は可能です。
     </simpara>
     <simpara>
      しかし、ここで注意すべき点は、パスワードのハッシュ処理はあくまでもデータストアへの不正アクセスからの保護にすぎず、
      アプリケーションやサービス自体に不正なコードを注入される攻撃からは守れないということです。
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.fasthash">
    <question>
     <simpara>
      よく使われるハッシュ関数である <function>md5</function> や
      <function>sha1</function> は、なぜパスワードのハッシュに適していないのですか?
     </simpara>
    </question>
    <answer>
     <simpara>
      MD5 や SHA1 そして SHA256 といったハッシュアルゴリズムは、
      高速かつ効率的なハッシュ処理のために設計されたものです。
      最近のテクノロジーやハードウェア性能をもってすれば、
      これらのアルゴリズムの出力を<quote>ブルートフォース</quote> で(力ずくで)調べて元の入力を得るのはたやすいことです。
     </simpara>
     <simpara>
      最近のコンピュータではハッシュアルゴリズムを高速に<quote>逆算</quote> できるので、
      セキュリティ技術者の多くはこれらの関数をパスワードのハッシュに使わないよう強く推奨しています。
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.bestpractice">
    <question>
     <simpara>
      よく使われるハッシュ関数では不適切だというのなら、
      パスワードをどうやってハッシュすればいいのですか?
     </simpara>
    </question>
    <answer>
     <simpara>
      パスワードをハッシュするときに検討すべき重要な二点は、
      その計算量とソルトです。
      ハッシュアルゴリズムの計算コストが増えれば増えるほど、
      ブルートフォースによる出力の解析に時間を要するようになります。
     </simpara>
     <simpara>
      PHP には
      <link linkend="book.password">ネイティブのパスワードハッシュ API</link>
      が用意されており、これを使えば <link linkend="function.password-hash">ハッシュの計算</link>
      や <link linkend="function.password-verify">パスワードの検証</link>
      を安全に行えます。
     </simpara>
     <simpara>
      パスワードをハッシュするときのおすすめのアルゴリズムは Blowfish です。
      パスワードハッシュ API でも、このアルゴリズムをデフォルトで使っています。
      というのも、このアルゴリズムは MD5 や SHA1 と比較して計算コストが高いにもかかわらず、スケーラブルだからです。
     </simpara>
     <simpara>
      <function>crypt</function> 関数もパスワードのハッシュに使えますが、
      他のシステムとの相互運用性を保つために使うのがおすすめです。
      可能な限り
      <link linkend="book.password">ネイティブのパスワードハッシュ API</link>
      を使うようにしましょう。
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.passwords.salt">
    <question>
     <simpara>
      ソルトとは?
     </simpara>
    </question>
    <answer>
     <simpara>
      暗号理論におけるソルトとは、ハッシュ処理の際に追加するデータのことです。
      事前に計算済みのハッシュとその元入力の対応表 (レインボーテーブル)
      で出力を解析される可能性を減らすために利用します。
     </simpara>
     <simpara>
      端的に言うと、ソルトとはちょっとした追加データです。
      これをつけるだけで、ハッシュをクラックするのが劇的に難しくなります。
      事前に計算済みのハッシュとその元入力を大量にまとめた表が、オンラインで多数公開されています。
      ソルトを使えば、そのハッシュ値がこれらの表に含まれている可能性を大きく減らすことができます。
     </simpara>
     <simpara>
      <function>password_hash</function> は、ソルトを指定しなかった場合にはランダムなソルトを作ります。
      一般に、これがいちばんお手軽で安全なアプローチでしょう。
     </simpara>
    </answer>
   </qandaentry>
   <qandaentry xml:id="faq.password.storing-salts">
    <question>
     <simpara>
      ソルトはどのように保存すればいいのですか？
     </simpara>
    </question>
    <answer>
     <simpara>
      <function>password_hash</function> や
      <function>crypt</function> を使った場合、戻り値であるパスワードハッシュの中にソルトが含まれています。
      このソルトは、そのままの形式でデータベースに格納する必要があります。
      というのも、利用したハッシュ関数の情報がそこに含まれており、それを直接
      <function>password_verify</function> や <function>crypt</function>
      に渡せばパスワードの検証ができるからです。
     </simpara>
     <warning>
      <simpara>
       タイミング攻撃を避けるために、保存されたハッシュ結果を比較したり
       再ハッシュを行う代わりに
       常に <function>password_verify</function> を使うべきです。
      </simpara>
     </warning>
     <simpara>
      <function>crypt</function> や <function>password_hash</function>
      の戻り値の書式を次の図に示します。
      このように、使ったアルゴリズムや検証時に必要なソフトに関する情報もすべて含まれています。
     </simpara>
     <para>
      <mediaobject>
       <alt>
        password_hash や crypt が戻す値。
        使ったアルゴリズム、そのアルゴリズムのオプション、使ったソルト、そしてハッシュしたパスワードが続く。
       </alt>
       <imageobject>
        <imagedata fileref="en/faq/figures/crypt-text-rendered.svg" width="690" depth="192" format="SVG" />
       </imageobject>
      </mediaobject>
     </para>
    </answer>
   </qandaentry>
  </qandaset>
  
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
