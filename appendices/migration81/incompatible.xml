<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: mumumu Status: ready -->
<sect1 xml:id="migration81.incompatible" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>下位互換性のない変更点</title>

 <sect2 xml:id="migration81.incompatible.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration81.incompatible.core.globals-access">
   <title>$GLOBALS へのアクセス制限</title>

   <para>
    <varname>$GLOBALS</varname> 配列へのアクセスに対し、
    多くの制限が適用されるようになりました。
    <code>$GLOBALS['var']</code> のような、
    個別の配列要素に対する読み取りや書き込みは、
    これまで通り動作します。
    <varname>$GLOBALS</varname> 配列全体への読み取り専用のアクセスも、
    引き続きサポートされます。
    しかし、<varname>$GLOBALS</varname> 配列全体への書き込みは、
    もはやサポートされなくなりました。
    たとえば、<code>array_pop($GLOBALS)</code>
    のようなコードは、エラーが発生します。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.static-variable-inheritance">
   <title>
    継承したメソッド内で <modifier>static</modifier> 変数を使う
   </title>

   <para>
    static 変数を使っているメソッドが継承された
    (但し、オーバーライドはされていない)
    場合、継承されたメソッドは
    static 変数を親クラスのメソッドと共有するようになりました。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
class A {
    public static function counter() {
        static $counter = 0;
        $counter++;
        return $counter;
    }
}
class B extends A {}
var_dump(A::counter()); // int(1)
var_dump(A::counter()); // int(2)
var_dump(B::counter()); // int(3), 以前のバージョンでは int(1)
var_dump(B::counter()); // int(4), 以前のバージョンでは int(2)
?>
]]>
     </programlisting>
    </informalexample>

    これは、メソッド中の static 変数が、
    static プロパティと同じ振る舞いをするようになったということです。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.optional-before-required">
   <title>必須の引数の前に、デフォルト値を持つ引数を指定した場合</title>

   <para>
    必須の引数の前に、
    <link linkend="functions.arguments.default">デフォルト値を持つ引数</link>
    を指定した場合、
    デフォルト値を持つ引数は常に必須の引数として扱われるようになりました。
    これは、
    <link linkend="functions.named-arguments">名前付き引数</link>
    を使って関数を呼び出した場合でも同様です。
    PHP 8.0.0 以降、かつ 8.1.0 より前のバージョンでは、
    以下のコードは推奨されない警告を発生させていましたが、
    呼び出しは成功していました。
    PHP 8.1.0 以降では、
    <classname>ArgumentCountError</classname>
    がスローされるようになっています。
    位置を指定して呼び出した場合でも、同じエラーがスローされます。
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
function makeyogurt($container = "bowl", $flavour)
{
    return "Making a $container of $flavour yogurt.\n";
}
try
{
    echo makeyogurt(flavour: "raspberry");
}
catch (Error $e)
{
    echo get_class($e), ' - ', $e->getMessage(), "\n";
}
?>
]]>
     </programlisting>
     &example.outputs.80;
     <screen>
<![CDATA[
Deprecated: Required parameter container
 in example.php on line 3
Making a bowl of raspberry yogurt.
]]>
     </screen>
     &example.outputs.81;
     <screen>
<![CDATA[
Deprecated: Optional parameter $container declared before required parameter
 $flavour is implicitly treated as a required parameter in example.php on line 3
ArgumentCountError - makeyogurt(): Argument #1 ($container) not passed
]]>
     </screen>
    </informalexample>
   </para>
   <para>
    但し、必須の引数の前であっても、
    <link linkend="language.types.declarations.nullable">Null を許容する型</link> を指定するために、
    引数にデフォルト値 &null; を指定できることに注意して下さい。
    その場合でも、その引数は必須であることには変わりありません。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.type-compatibility-internal">
   <title>内部クラスと戻り値の型の互換性</title>

   <para>
    ほとんどの final でない内部メソッドは、
    それをオーバライドする際、
    互換性がある戻り値の型を宣言することが必須になりました。
    そうしない場合、継承が有効かを検証する際に、
    推奨されない警告が発生するようになります。
    PHP のバージョン間の互換性を保ちたいがために、
    戻り値の型を宣言できない場合、
    アトリビュート <classname>ReturnTypeWillChange</classname>
    を追加することで警告を抑止できます。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.core.new-keywords">
   <title>新しいキーワード</title>
   <para>
    <literal>readonly</literal> は予約されたキーワードになりました。しかし、まだ関数名としては使えます。
   </para>
   <para>
    <literal>never</literal> が予約語になりました。
    よって、クラスやインターフェイス、
    トレイトの名前として使えなくなっています。
    名前空間の中であっても同様です。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.resource2object">
  <title>リソースからオブジェクトへの移行</title>

  <para>
   いくつかの &resource; が、&object; に移行しました。
   <function>is_resource</function>
   関数を使って戻り値をチェックしているコードは、
   &false; を返すことをチェックするコードに置き換えるべきです。 
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <link linkend="book.fileinfo">FileInfo</link> 関数は、
     <literal>fileinfo</literal> &resource; ではなく、
     <classname>finfo</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.ftp">FTP</link> 関数は、
     <literal>ftp</literal> &resource; ではなく、
     <classname>FTP\Connection</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.imap">IMAP</link> 関数は、
     <literal>imap</literal> &resource; ではなく、
     <classname>IMAP\Connection</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.ldap">LDAP</link> 関数は、
     <literal>ldap link</literal> &resource; ではなく、
     <classname>LDAP\Connection</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.ldap">LDAP</link> 関数は、
     <literal>ldap result</literal> &resource; ではなく、
     <classname>LDAP\Result</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.ldap">LDAP</link> 関数は、
     <literal>ldap result entry</literal> &resource; ではなく、
     <classname>LDAP\ResultEntry</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.pgsql">PgSQL</link> 関数は、
     <literal>pgsql link</literal> &resource; ではなく、
     <classname>PgSql\Connection</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.pgsql">PgSQL</link> 関数は、
     <literal>pgsql result</literal> &resource; ではなく、
     <classname>PgSql\Result</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.pgsql">PgSQL</link> 関数は、
     <literal>pgsql large object</literal> &resource; ではなく、
     <classname>PgSql\Lob</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.pspell">PSpell</link> 関数は、
     <literal>pspell</literal> &resource; ではなく、
     <classname>PSpell\Dictionary</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
   <listitem>
    <para>
     <link linkend="book.pspell">PSpell</link> 関数は、
     <literal>pspell config</literal> &resource; ではなく、
     <classname>PSpell\Config</classname> オブジェクトを受け取り、
     返すようになりました。
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqli">
  <title>MySQLi</title>

  <para>
   <function>mysqli_fetch_fields</function>
   と
   <function>mysqli_fetch_field_direct</function> は、
   <property>max_length</property> を指定すると
   常に <literal>0</literal> を返すようになりました。
   この情報は、結果セットを繰り返し処理する際に計算できますし、
   長さの最大値をとります。
   PHP でも以前のバージョンから、
   内部的にこれと同じ処理が行われてきました。
  </para>

  <para>
   <constant>MYSQLI_STMT_ATTR_UPDATE_MAX_LENGTH</constant>
   オプションは、もはや意味をなさなくなりました。
  </para>

  <para>
   <constant>MYSQLI_STORE_RESULT_COPY_DATA</constant>
   オプションは、もはや意味をなさなくなりました。
   <methodname>mysqli::store_result</methodname>
   の <parameter>mode</parameter> 引数にどんな値を渡しても、
   同様に意味がなくなっています。
  </para>

  <para>
   <methodname>mysqli::connect</methodname> は、
   成功時に &null; ではなく、&true; を返すようになりました。
  </para>

  <para>
   デフォルトのエラー処理モードが、
   "silent" から
   "exceptions" に変更されました。
   この変更の意味の詳細と、
   どのようにこの属性を明示的に設定するかについては、
   <link linkend="mysqli-driver.report-mode">MySQLi のエラー報告モード</link>
   のページを参照ください。
   以前のバージョンの振る舞いは、
   <code>mysqli_report(MYSQLI_REPORT_OFF);</code>
   を使うことで再現できます。
  </para>

  <para>
   <methodname>mysqli_stmt::execute</methodname>
   を継承したクラスは、
   追加でオプションの引数を指定しなければいけません。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.mysqlnd">
  <title>MySQLnd</title>

  <para>
   INI ディレクティブ
   <link linkend="ini.mysqlnd.fetch_data_copy">mysqlnd.fetch_data_copy</link>
   が削除されました。
   このディレクティブによって、
   ユーザーの目に見える形で、振る舞いが変更されるべきではないからです。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.openssl">
  <title>OpenSSL</title>

  <para>
   EC キーの秘密鍵は、他のキーと同じように
   <acronym>PKCS</acronym>#8 フォーマットでエクスポートされるようになりました。
  </para>
  <para>
   <function>openssl_pkcs7_encrypt</function>
   と
   <function>openssl_cms_encrypt</function> は、
   デフォルト値が RC2-40 から AES-128-CBC に変更されました。
   RC2-40 暗号はセキュアではないと見なされており、
   OpenSSL 3 からはデフォルトで有効ではなくなっています。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.pdo">
  <title>PHP Data Objects(PDO)</title>

  <para>
   <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
   は、&boolean; 型の値を
   <literal>"0"</literal> や <literal>"1"</literal>
   に変換するようになりました。
   以前のバージョンでは、&boolean; は文字列に変換されていませんでした。
  </para>
  <para>
   <methodname>PDOStatement::bindColumn</methodname>
   に
   <constant>PDO::PARAM_LOB</constant>
   を指定してコールした場合、
   かつ、<constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
   が有効になっていない場合は、
   常にストリームに結果をバインドするようになりました。
   以前のバージョンでは、
   使っているデータベースドライバやバインドが行われるタイミングによって、
   文字列にバインドされることもあれば、
   ストリームにバインドされることもありました。
  </para>

  <sect3 xml:id="migration81.incompatible.pdo.mysql">
   <title>MySQL ドライバ</title>

   <para>
    結果セットの整数と浮動小数点の値は、
    エミュレートされたプリペアドステートメントを使った場合、
    文字列ではなく、
    ネイティブの PHP の型を使って返されるようになりました。
    これは、ネイティブのプリペアドステートメントの振る舞いと一致します。
    以前のバージョンの振る舞いは、
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
    オプションを有効にすることで再現できます。
   </para>
  </sect3>

  <sect3 xml:id="migration81.incompatible.pdo.sqlite">
   <title>SQLite ドライバ</title>

   <para>
    結果セットの整数と浮動小数点の値は、
    ネイティブの PHP の型を使って返されるようになりました。
    以前のバージョンの振る舞いは、
    <constant>PDO::ATTR_STRINGIFY_FETCHES</constant>
    オプションを有効にすることで再現できます。
   </para>
  </sect3>
 </sect2>

 <sect2 xml:id="migration81.incompatible.phar">
  <title>Phar</title>

  <para>
   <interfacename>ArrayAccess</interfacename>
   インターフェイスに準拠するため、
   <methodname>Phar::offsetUnset</methodname> と、
   <methodname>PharData::offsetUnset</methodname>
   は &boolean; を返さなくなりました。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.standard">
  <title>標準ライブラリ</title>

  <para>
   <function>version_compare</function> は、
   ドキュメントに書かれていない演算子の省略形を受け入れなくなりました。
  </para>

  <para>
   <function>htmlspecialchars</function>,
   <function>htmlentities</function>,
   <function>htmlspecialchars_decode</function>,
   <function>html_entity_decode</function>,
   <function>get_html_translation_table</function> のデフォルト値が、
   <constant>ENT_COMPAT</constant> から
   <literal>ENT_QUOTES | ENT_SUBSTITUTE</literal> に変更されました。
   これは、<literal>'</literal> が
   <literal>&amp;#039;</literal> にエスケープされるようになるということです。
   以前のバージョンでは、<literal>'</literal>
   に対してはエスケープは行われていませんでした。
   さらに、不正な UTF-8 文字列は、空文字列を返すのではなく、
   Unicode 置換文字に置きかえられるようになっています。
  </para>

  <para>
   <function>debug_zval_dump</function> は、
   値の前に <literal>&amp;</literal> を付加する代わりに、
   自身のリファレンスカウントだけでなく、
   リファレンスラッパーのリファレンスカウントも表示するようになりました。
   これは、PHP 7.0 以降のリファレンスの表現をより正確にモデル化したものです。
  </para>

  <para>
   <function>debug_zval_dump</function> は、
   インターン化された文字列や、
   変更できない配列については、
   ダミーのリファレンスカウントではなく、
   <literal>interned</literal> と表示するようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration81.incompatible.spl">
  <title>Standard PHP Library (SPL)</title>

  <para>
   <classname>SplFixedArray</classname> は、
   &array; のように JSON にエンコードできるようになりました。
  </para>
 </sect2>

</sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
