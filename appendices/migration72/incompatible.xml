<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8859c8b96cd9e80652813f7bcf561432a5e9f934 Maintainer: takagi Status: ready -->
<!-- CREDITS: mumumu -->

<sect1 xml:id="migration72.incompatible">
 <title>下位互換性のない変更点</title>

 <sect2 xml:id="migration72.incompatible.number_format-no-neg-zero">
  <title><function>number_format</function> は負のゼロを返さない</title>

  <para>
   以前のバージョンでは、<function>number_format</function> 関数が
   <literal>-0</literal> を返せました。
   これは IEEE 754 浮動小数点標準規格に沿ったまったく問題のない値ですが、
   人間が読みやすい形式に数値をフォーマットするという意味では少し不自然でした。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(number_format(-0.01)); // string(2) "-0" ではなく string(1) "0" となります
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-array-casts">
  <title>オブジェクトと配列の型変換における数値キーの扱い</title>

  <para>
   配列からオブジェクトへのキャストやその逆のキャストにおける、数値キーの扱いが改善されました。
   明示的なキャストだけではなく <function>settype</function> を使った場合も同様です。
  </para>

  <para>
   数値キーの配列をオブジェクトにキャストしたときに、その要素にアクセスできるようになったのです。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// 配列からオブジェクトへの変換
$arr = [0 => 1];
$obj = (object) $arr;
var_dump(
    $obj,
    $obj->{'0'}, // アクセスできるようになりました
    $obj->{0} // アクセスできるようになりました
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(stdClass)#1 (1) {
  ["0"]=>    // 数値キーではなく、文字列のキーになりました
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>

  <para>
   また、オブジェクトに数値のキーが含まれる場合に、
   配列にキャストしてもその要素にアクセスできるようになりました。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// オブジェクトから配列への変換
$obj = new class {
    public function __construct()
    {
        $this->{0} = 1;
    }
};
$arr = (array) $obj;
var_dump(
    $arr,
    $arr[0], // アクセスできるようになりました
    $arr['0'] // アクセスできるようになりました
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(1) {
  [0]=>    // 文字列のキーではなく、整数のキーになります
  int(1)
}
int(1)
int(1)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.no-null-to-get_class">
  <title><function>get_class</function> に &null; を渡せない</title>

  <para>
   以前のバージョンでは、<function>get_class</function> に &null;
   を渡すと、そのコンテキストの外側のクラスを返していました。
   この機能は削除され、&null; を渡すと <constant>E_WARNING</constant> が発生するようになりました。
   以前と同様の挙動を実現したい場合は、&null; を渡すのではなく単にパラメータを省略するようにしましょう。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.warn-on-non-countable-types">
  <title>countable ではない型をカウントしたときの警告</title>

  <para>
   countable ではない型に対して <function>count</function> (およびそのエイリアスである
   <function>sizeof</function>) を使ったときに
   <constant>E_WARNING</constant> が発生するようになりました。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

var_dump(
    count(null), // NULL はカウントできません
    count(1), // integer はカウントできません
    count('abc'), // string はカウントできません
    count(new stdClass), // Countable インターフェイスを実装していないオブジェクトはカウントできません
    count([1,2]) // array はカウントできます
);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d

Warning: count(): Parameter must be an array or an object that implements Countable in %s on line %d
int(0)
int(1)
int(1)
int(1)
int(2)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-ext-to-objects">
  <title>ext/hash がリソースからオブジェクトへ</title>

  <para>
   長期にわたるリソースからオブジェクトへの移行作業の一環として、
   <link linkend="book.hash">Hash</link> 拡張モジュールがリソースではなくオブジェクトを使うようになりました。
   開発者側から見て特に変わるところはありませんが、もし
   <function>is_resource</function> を使ったチェックを行っているのなら、
   それを <function>is_object</function> に書き換える必要があります。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.ssl-tls-defaults">
  <title>SSL/TLS のデフォルトの改善</title>

  <para>
   デフォルト設定が以下のように変わりました。
  </para>

  <itemizedlist>
   <listitem>
    <simpara>
     <literal>tls://</literal> が、TLSv1.0 や TLSv1.1 や TLSv1.2 のデフォルトになりました。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>ssl://</literal> は <literal>tls://</literal> のエイリアスになりました。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <literal>STREAM_CRYPTO_METHOD_TLS_*</literal> 定数のデフォルトが、
     TLSv1.0 だけではなく TLSv1.0 または TLSv1.1 + TLSv1.2 となりました。
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>

 <sect2 xml:id="migration72.incompatible.gettype-on-closed-resource">
  <title><function>gettype</function> にクローズ済みのリソースを渡した際の戻り値</title>

  <para>
   以前のバージョンでは、 <function>gettype</function> にクローズ済みのリソースを渡すと、<literal>"unknown type"</literal> という文字列を返していました。
   これからは、 <literal>"resource (closed)"</literal> という文字列が返されます。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.is_object-on-incomplete_class">
  <title><function>is_object</function> と <classname>__PHP_Incomplete_Class</classname></title>

  <para>
   以前のバージョンでは、  <classname>__PHP_Incomplete_Class</classname> クラスに対して、
   <function>is_object</function> を使うと &false; が返されていました。
   これからは &true; が返されます。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.undefined-constants">
  <title>定義されていない定数のエラーレベル変更</title>

  <para>
   定義されていない定数への参照を行った場合、 <constant>E_WARNING</constant> を生成するようになりました。
   (今までは <constant>E_NOTICE</constant>を生成していました。)
   次のPHPメジャーバージョンでは、<classname>Error</classname> 例外を生成するように変更される予定です。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.windows-support">
  <title>Windows サポート</title>

  <para>
   現在、公式にサポートしている最低バージョンは Windows 7/Server 2008 R2です。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.trait-properties">
  <title>trait のプロパティの値チェック</title>

  <para>
   trait のプロパティの値に対して互換性があるかどうかをチェックするときは、値のキャストを行わなくなりました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.object-reserved-word">
  <title><literal>object</literal> をクラス名に使う</title>

  <para>
   <literal>object</literal> という名前は、PHP 7.0 では緩く予約されていました。
   PHP 7.2 からは制約が強くなり、クラスや trait、インターフェイスの名前として使うことが禁止されます。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.netware-support">
  <title>NetWare サポート</title>

  <para>
   NetWareのサポートが削除されました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.array-unique">
  <title><function>array_unique</function> 関数を
  <constant>SORT_STRING</constant> と使う場合</title>

  <para>
   <function>array_unique</function> 関数を <constant>SORT_STRING</constant>
   と使う場合、以前は配列をコピーし、重複した要素を削除
   (配列を後にパックせずに) していましたが、このバージョンからは
   新しい配列作られ、ユニークな要素を追加するようになりました。
   これにより、以前のバージョンとは異なった数値のインデックスが生成されます。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.bcmod-and-floats">
  <title><function>bcmod</function> の小数点に対する挙動変更</title>

  <para>
   <function>bcmod</function> 関数が小数点切り捨てをしないようになりました。
   これからは、挙動は <literal>%</literal> 演算子ではなく、 <function>fmod</function>に準拠します。
   たとえば、 <literal>bcmod('4', '3.5')</literal> はいままでの<literal>1</literal>ではなく、 <literal>0.5</literal> を返します。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.hash-functions">
  <title>ハッシュ関数と非暗号化ハッシュ</title>

  <para>
   <function>hash_hmac</function>、 <function>hash_hmac_file</function>、
   <function>hash_pbkdf2</function>、 および <function>hash_init</function> (
   <constant>HASH_HMAC</constant>) は非暗号化ハッシュを受け入れないように変更されました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.json_decode-changes">
  <title><function>json_decode</function> 関数のオプション</title>

  <para>
   <function>json_decode</function> 関数のオプション、
   <constant>JSON_OBJECT_AS_ARRAY</constant> は、2番めのパラメータ (assoc) が &null;
   の場合に使用されるようになりました。
   <constant>JSON_OBJECT_AS_ARRAY</constant> はこれまで無視されていました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.rand-mt_rand-output">
  <title><function>rand</function> と <function>mt_rand</function> の出力</title>

  <para>
   特定のシードで <function>rand</function> と
   <function>mt_rand</function> で生成されたシーケンスは、64-bit マシンで動作しているPHP 7.1と値が異なる場合があります。
   (モジュロバイアスのバグ修正が実装されました。).
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.sqlsafe_mode-ini-setting">
  <title><link linkend="ini.sql.safe-mode"><parameter>sql.safe_mode</parameter></link> のini設定削除</title>

  <para>
   <parameter>sql.safe_mode</parameter> のini設定が削除されました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.date_parse_from_format">
  <title><function>date_parse</function> と
  <function>date_parse_from_format</function> 関数への変更</title>

  <para>
   <function>date_parse</function> 関数 と
   <function>date_parse_from_format</function> 関数
   が返す <literal>zone</literal> 要素は、
   分ではなくて秒を表現するようになり、符号も逆になりました。
   たとえば <literal>-120</literal> 分は
   <literal>7200</literal> 秒を意味するようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration72.incompatible.cookie-decode">
  <title>外部から入力されるCookie</title>

  <para>
   PHP 7.2.34 以降は、セキュリティ上の理由により、
   外部から入力される Cookie の
   <emphasis>名前</emphasis> はurlデコードされなくなりました。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
