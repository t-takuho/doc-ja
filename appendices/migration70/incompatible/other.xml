<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 6a52dd81e3f791065b4b65a68d393012a7fdd858 Maintainer: takagi Status: ready -->

<sect2 xml:id="migration70.incompatible.other">
 <title>下位互換性のないその他の変更</title>

 <sect3 xml:id="migration70.incompatible.other.new-by-ref">
  <title>新しいオブジェクトを参照渡しで代入できない</title>

  <para>
   &new; 文の結果を参照渡しで変数に代入することができなくなりました。
   by reference:
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class C {}
$c =& new C;
?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
Deprecated: Assigning the return value of new by reference is deprecated in /tmp/test.php on line 3
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Parse error: syntax error, unexpected 'new' (T_NEW) in /tmp/test.php on line 3
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.classes">
  <title>無効なクラス名、インターフェイス名、トレイト名</title>

  <para>
   以下の名前は、クラスやインターフェイスそしてトレイトの名前としては使えなくなりました。
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>bool</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>int</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>float</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>string</type></simpara>
   </listitem>
   <listitem>
    <simpara>&null;</simpara>
   </listitem>
   <listitem>
    <simpara>&true;</simpara>
   </listitem>
   <listitem>
    <simpara>&false;</simpara>
   </listitem>
  </itemizedlist>

  <para>
   さらに、以下に挙げる名前も使うべきではありません。
   PHP 7.0 の時点ではまだエラーにはなりませんが、
   これらの名前は将来のバージョン用に予約されており、いずれ使えなくなると考えるべきです。
  </para>

  <itemizedlist>
   <listitem>
    <simpara><type>resource</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>object</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>mixed</type></simpara>
   </listitem>
   <listitem>
    <simpara><type>numeric</type></simpara>
   </listitem>
  </itemizedlist>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.php-tags">
  <title>ASP タグと script タグの廃止</title>

  <para>
   ASP 形式のタグや script タグを使って PHP コードを囲むことはできなくなりました。
   この影響を受けるのは、以下のタグです。
  </para>

  <table>
   <title>削除された ASP タグおよび script タグ</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>開始タグ</entry>
      <entry>終了タグ</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><code>&lt;%</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;%=</code></entry>
      <entry><code>%&gt;</code></entry>
     </row>
     <row>
      <entry><code>&lt;script language="php"&gt;</code></entry>
      <entry><code>&lt;/script&gt;</code></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.incompatible-this">
  <title>非互換のコンテキストからの呼び出しの削除</title>

  <para>
   <link linkend="migration56.deprecated.incompatible-context">既に PHP 5.6 で非推奨になっていますが</link>、
   static ではないメソッドに対して非互換のコンテキストで static 呼び出しを行うと、
   呼ばれた側のメソッドが未定義の <literal>$this</literal> 変数を持つことになって警告が発生します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {
    public function test() { var_dump($this); }
}

// クラスAを継承して「いない」ことに注目
class B {
    public function callNonStaticMethodOfA() { A::test(); }
}

(new B)->callNonStaticMethodOfA();
?>
]]>
   </programlisting>
   &example.outputs.56;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically, assuming $this from incompatible context in /tmp/test.php on line 8
object(B)#1 (0) {
}
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
Deprecated: Non-static method A::test() should not be called statically in /tmp/test.php on line 8

Notice: Undefined variable: this in /tmp/test.php on line 3
NULL
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.yield">
  <title>&yield; が右代入演算子に</title>

  <para>
    &yield; で括弧が必須ではなくなり、右代入演算子に変わりました。
   優先順位は
   <literal>print</literal> と <literal>=&gt;</literal> の間になります。
   これによって、以下のように振る舞いが変わります。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
echo yield -1;
// 以前はこのように解釈されました
echo (yield) - 1;
// PHP 7 ではこのように解釈されます
echo yield (-1);

yield $foo or die;
// 以前はこのように解釈されました
yield ($foo or die);
// PHP 7 ではこのように解釈されます
(yield $foo) or die;
?>
]]>
   </programlisting>
  </informalexample>

  <para>
   括弧を使えば、曖昧さを排除できます。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameters">
  <title>同じ名前のパラメータをひとつの関数に複数定義できない</title>

  <para>
   関数内の複数のパラメータを同じ名前にすることができなくなりました。
   たとえば次のようなメソッドは
   <constant>E_COMPILE_ERROR</constant> となります。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($a, $b, $unused, $unused) {
    //
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.func-parameter-modified">
  <title>引数を調べる関数は、パラメータの <emphasis>その時点での</emphasis> 値を報告する</title>

  <para>
   <function>func_get_arg</function>, <function>func_get_args</function>,
   <function>debug_backtrace</function> といった関数や例外時のバックトレースで得られる値が、
   パラメータとして渡されたときの値ではなくなりました。
   その時点での値が得られるようになります (つまり、パラメータとして渡された値から変更されている可能性があります)。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function foo($x) {
    $x++;
    var_dump(func_get_arg(0));
}
foo(1);?>
]]>
   </programlisting>
   &example.outputs.5;
   <screen>
<![CDATA[
1
]]>
   </screen>
   &example.outputs.7;
   <screen>
<![CDATA[
2
]]>
   </screen>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.multiple-default">
  <title>Switch 文に複数の default ブロックを書けない</title>

  <para>
   ひとつの switch 文の中に、複数の default ブロックを定義することができなくなりました。
   たとえば次の switch 文は
   <constant>E_COMPILE_ERROR</constant> になります。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
switch (1) {
    default:
    break;
    default:
    break;
}
?>
]]>
   </programlisting>
  </informalexample>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.http-raw-post-data">
  <title><varname>$HTTP_RAW_POST_DATA</varname> の削除</title>

  <para>
   <varname>$HTTP_RAW_POST_DATA</varname> が使えなくなりました。かわりに
   <link linkend="wrappers.php.input"><literal>php://input</literal></link>
   ストリームを使いましょう。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.ini-comments">
  <title>INI ファイルにおける <literal>#</literal> 形式のコメントの削除</title>

  <para>
   INI ファイルにおいて <literal>#</literal> で始まる行をコメントとする機能が削除されました。
   かわりに <literal>;</literal> を使いましょう。
   この変更は、&php.ini; だけではなく、
   <function>parse_ini_file</function> や <function>parse_ini_string</function>
   が扱うファイルにもあてはまります。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.json-to-jsond">
  <title>JSON 拡張モジュールが JSOND に置き換わる</title>

  <para>
   JSON 拡張モジュールが JSOND に置き換わりました。
   下位互換性を損ねるちょっとした変更が二点あります。
   まず、数値の最後を小数点で終えることができなくなりました (つまり、
   <literal>34.</literal> とすることはできず、<literal>34.0</literal> あるいは
   <literal>34</literal> としなければいけません)。
   次に、科学記法を使う際に、指数記号
   <literal>e</literal> を小数点の直後に置くことができなくなりました
   (つまり、<literal>3.e3</literal> とすることはできず、
   <literal>3.0e3</literal> あるいは <literal>3e3</literal> としなければいけません)。
   最後に、空の文字列は妥当な JSON だとみなされなくなりました。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.internal-function-failure-overflow">
  <title>内部関数がオーバーフローしたときの挙動</title>

  <para>
   これまでのバージョンでは、浮動小数点数値が大きすぎて整数として表せない場合に、
   float から integer に変換した結果を黙って切り詰めていました。
   PHP 7 では E_WARNING が発生し、&null; を返します。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.fixes-custom-session-handler">
  <title>カスタムセッションハンドラの戻り値の修正</title>

  <para>
   カスタムセッションハンドラとして実装した関数が
   &false; あるいは <literal>-1</literal> を返すとき、fatal error が発生します。
   この関数が boolean 値か <literal>-1</literal>, あるいは
   <literal>0</literal> 以外を返す場合は、その関数は失敗して E_WARNING が発生します。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.sort-order">
  <title>同値な要素の並び順</title>
  <para>
   内部的なソートアルゴリズムが改良されたことに伴って、
   比較したときに等しいとみなされる要素の並び順が以前とは変わるかもしれません。
  </para>
  <note>
   <para>
    同値な要素の並び順に依存するコードは書かないようにしましょう。
    その並び順がいつまでも同じであるとは限りません。
   </para>
  </note>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.break-continue">
  <title>break 文と continue 文の位置の間違い</title>
  <para>
   ループまたは <literal>switch</literal> 制御構造の外の
   <literal>break</literal> および <literal>continue</literal> 文は、 
   以前のように実行時ではなくコンパイル時に検出され、
   <constant>E_COMPILE_ERROR</constant> を起こします。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.break-continue-constant">
  <title>break と continue 文に定数は渡せなくなった</title>
  <para>
   <literal>break</literal> と <literal>continue</literal>
   文は定数を引数として渡せなくなりました。
   渡すと、
   <constant>E_COMPILE_ERROR</constant> が発生します。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.mhash">
  <title>Mhash はもう拡張モジュールではありません</title>
  <para>
   Mhash 拡張は <link linkend="book.hash">Hash</link> 拡張に完全に統合されました。
   したがって、<function>extension_loaded</function> で Mhash サポートを検出できなくなりました。
   代わりに <function>function_exists</function> を使用してください。
   さらに、Mhash は <function>get_loaded_extensions</function> および関連機能により報告されなくなりました。
  </para>
 </sect3>

 <sect3 xml:id="migration70.incompatible.other.declare-ticks">
  <title>declare(ticks)</title>
  <para>
   <link linkend="control-structures.declare.ticks">declare(ticks)</link>
   ディレクティブは、異なるコンパイル単位にリークしなくなりました。
  </para>
 </sect3>
</sect2>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
