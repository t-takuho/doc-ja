<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1422d543bf028003a543fd1ce920c6a301a93a51 Maintainer: takagi Status: ready -->
<!-- Credits: mumumu -->

<sect1 xml:id="migration70.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新機能</title>

 <sect2 xml:id="migration70.new-features.scalar-type-declarations">
  <title>スカラー型宣言</title>

  <para>
   スカラー
   <link linkend="language.types.declarations">型宣言</link>
   には二つの方式があります。デフォルトの自動変換(coercive) モードと、
   厳密に判断する strict モードです。
   パラメータとして、
   文字列 (<type>string</type>)、整数 (<literal>int</literal>)、浮動小数点数
   (<type>float</type>)、boolean (<literal>bool</literal>)
   といった型をいずれかの方式で強制できるようになりました。
   これらは、PHP 5 で導入された型宣言 (クラス名やインターフェイス、配列そして <type>callable</type>)
   を強化するものです。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// デフォルトのモード
function sumOfInts(int ...$ints)
{
    return array_sum($ints);
}

var_dump(sumOfInts(2, '3', 4.1));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(9)
]]>
   </screen>
  </informalexample>

  <para>
   strict モードを有効にするには、ファイルの先頭に &declare; ディレクティブを置く必要があります。
   つまり、スカラー型を厳密に扱うかどうかは、ファイル単位で定めるということです。
   このディレクティブは、パラメータの型宣言だけでなく、関数の戻り値の型
   (<link linkend="language.types.declarations">戻り値の型宣言</link>を参照ください)
   や PHP の標準関数、そして拡張モジュールの関数にも影響を及ぼします。
  </para>

  <para>
   スカラー型宣言に関するドキュメントやサンプルについては、
   <link linkend="language.types.declarations">型宣言</link>
   を参照ください。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.return-type-declarations">
  <title>戻り値の型宣言</title>

  <para>
   PHP 7 では、
   <link linkend="language.types.declarations">戻り値の型宣言</link>
   もできるようになりました。
   <link linkend="language.types.declarations">引数の型宣言</link>
   と同様に、戻り値の型宣言では、関数が戻す値がどの型になるかを宣言します。
   戻り値の型宣言で使える
   <link linkend="language.types.declarations">型</link>
   は、引数の型宣言で使えるものと同じです。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

function arraysSum(array ...$arrays): array
{
    return array_map(function(array $array): int {
        return array_sum($array);
    }, $arrays);
}

print_r(arraysSum([1,2,3], [4,5,6], [7,8,9]));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => 6
    [1] => 15
    [2] => 24
)
]]>
   </screen>
  </informalexample>

  <para>
   詳細なドキュメントやサンプルについては、
   <link linkend="language.types.declarations">戻り値の型宣言</link>.
   を参照ください。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.null-coalesce-op">
  <title>Null 合体演算子</title>

  <para>
   null 合体演算子 (<literal>??</literal>) がシンタックスシュガーとして追加されました。
   三項演算子と <function>isset</function> を組み合わせる
   よくありがちなパターンを、より簡単に書くためのものです。
   この演算子は、もし第一オペランドが非 &null; の値であればそれを返し、
   そうでない場合は第二オペランドを返します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// $_GET['user'] を取得します。もし存在しない場合は
// 'nobody' を用います。
$username = $_GET['user'] ?? 'nobody';
// 上のコードは、次のコードと同じ意味です。
$username = isset($_GET['user']) ? $_GET['user'] : 'nobody';

// 合体演算子を連結することもできます。次のように書くと、
// $_GET['user']、$_POST['user'] そして 'nobody'
// の順に調べて、非 &null; が定義されている最初の値を返します。
$username = $_GET['user'] ?? $_POST['user'] ?? 'nobody';
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.spaceship-op">
  <title>宇宙船演算子</title>
  <para>
   宇宙船演算子は、二つの式を比較するために使うものです。
   <varname>$a</varname> が <varname>$b</varname> より大きい場合は 1、
   <varname>$a</varname> と <varname>$b</varname> が等しい場合は 0、
   <varname>$a</varname> が <varname>$b</varname> より小さい場合は -1 をそれぞれ返します。
   比較の際には、
   <link linkend="types.comparisons">PHP 型の比較表</link>
   のルールを用います。
  </para>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// 整数値
echo 1 <=> 1; // 0
echo 1 <=> 2; // -1
echo 2 <=> 1; // 1

// 浮動小数点数値
echo 1.5 <=> 1.5; // 0
echo 1.5 <=> 2.5; // -1
echo 2.5 <=> 1.5; // 1
 
// 文字列
echo "a" <=> "a"; // 0
echo "a" <=> "b"; // -1
echo "b" <=> "a"; // 1
?>
]]>
   </programlisting>
  </informalexample>

  <!-- TODO: we don't need further details here, but this still has to be
       added to the operator precedence table -->
 </sect2>

 <sect2 xml:id="migration70.new-features.define-array">
  <title><function>define</function> を用いた配列定数の定義</title>

  <para>
   <function>define</function> で配列の定数を定義できるようになりました。
   PHP 5.6 までのバージョンでは、配列の定数は &const; でしか定義できませんでした。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
define('ANIMALS', [
    'dog',
    'cat',
    'bird'
]);

echo ANIMALS[1]; // "cat" と出力します
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.anonymous-classes">
  <title>無名クラス</title>

  <para>
   無名クラスをサポートするようになりました。<literal>new
   class</literal> を使って利用します。
   その場限りの使い捨てのオブジェクトなどで、完全なクラス定義のかわりとして使えます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this->logger;
    }

    public function setLogger(Logger $logger) {
         $this->logger = $logger;
    }
}

$app = new Application;
$app->setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app->getLogger());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
object(class@anonymous)#2 (0) {
}
]]>
   </screen>
  </informalexample>

  <para>
   詳細なドキュメントは
   <link linkend="language.oop5.anonymous">無名クラス</link>
   を参照ください。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.unicode-codepoint-escape-syntax">
  <title>Unicode コードポイントエスケープ構文</title>

  <para>
   Unicode のコードポイントを十六進形式で受け取って、
   それを UTF-8 で (ダブルクォートで囲まれた文字列あるいはヒアドキュメントとして) 出力します。
   妥当な形式のコードポイントならあらゆるものが使えます。先頭のゼロは省略してもかまいません。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

echo "\u{aa}", PHP_EOL;
echo "\u{0000aa}", PHP_EOL;

echo "\u{9999}", PHP_EOL;

echo <<<EOT
\u{01f418}
EOT;

?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
a
a (先頭のゼロを省略せずに書いても、前の行と同じ結果になります)
香
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.closure-call-method">
  <title><methodname>Closure::call</methodname></title>

  <para>
   <methodname>Closure::call</methodname>
   は、オブジェクトのスコープをクロージャに一時的に束縛して実行するための、
   より高性能で簡潔な方法です。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
class A {private $x = 1;}

// 以前のバージョンのコード
$getX = function() {return $this->x;};
$getXCB = $getX->bindTo(new A, 'A'); // 中間クロージャが必要
echo $getXCB();

// PHP 7 以降でのコード
$getX = function() {return $this->x;};
echo $getX->call(new A);
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
1
]]>
   </screen>
  </informalexample>
 </sect2>
 <sect2 xml:id="migration70.new-features.filtered-unserialize">
  <title><function>unserialize</function> のフィルタリング</title>

  <para>
   この仕組みは、信頼できないデータからオブジェクトを復元する際に、
   よりセキュリティを高められるようにするために用意されたものです。
   アンシリアライズ可能なクラスの一覧をホワイトリストとして定義することで、
   コードインジェクション攻撃を防ぎます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// オブジェクトはすべて、__PHP_Incomplete_Class のオブジェクトに変換します
$data = unserialize($foo, ["allowed_classes" => false]);

// MyClassとMyClass2以外のすべてのオブジェクトを、__PHP_Incomplete_Class のオブジェクトに変換します
$data = unserialize($foo, ["allowed_classes" => ["MyClass", "MyClass2"]]);

// デフォルト (第二引数を省略した場合) の挙動は以下のようになり、すべてのオブジェクトをそのまま復元します
$data = unserialize($foo, ["allowed_classes" => true]);
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intlchar">
  <title><classname>IntlChar</classname></title>

  <para>
   ICU のさらなる機能を利用するために、新しく <classname>IntlChar</classname>
   クラスが追加されました。このクラスには数々の static メソッドと定数が定義されており、
   これらを使って Unicode の文字を操作できます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

printf('%x', IntlChar::CODEPOINT_MAX);
echo IntlChar::charName('@');
var_dump(IntlChar::ispunct('!'));
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
10ffff
COMMERCIAL AT
bool(true)
]]>
   </screen>
  </informalexample>

  <para>
   このクラスを使うには、<link linkend="book.intl">Intl</link> 拡張モジュールをインストールしなければいけません。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.expectations">
  <title>Expectation</title>

  <para>
   Expectations は、かつての
   <function>assert</function> 関数を、下位互換性を保ったまま拡張したものです。
   これを用いると、コストをかけずに実運用コードの中にアサーションを組み込めます。
   そして、アサーションが失敗した際に自作の例外をスローできるようになります。
  </para>

  <para>
   これまでの API も下位互換性を保つために維持されていますが、
   <function>assert</function> は言語構造となりました。
   最初のパラメータには、単に評価対象の文字列や <type>bool</type>
   値を指定するだけではなく、式を渡せます。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
ini_set('assert.exception', 1);

class CustomError extends AssertionError {}

assert(false, new CustomError('Some error message'));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
Fatal error: Uncaught CustomError: Some error message
]]>
   </screen>
  </informalexample>

  <para>
   開発環境および運用環境での設定方法などの詳細については、
   言語構造 <function>assert</function> のマニュアルを参照ください。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.group-use-declarations">
  <title><literal>use</literal> 宣言のグループ化</title>

  <para>
   複数のクラスや関数そして定数を同じ &namespace; からインポートする際に、
   単一の &use.namespace; 文にまとめられるようになりました。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
// 以前のバージョンのコード
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

// PHP 7 以降のコード
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.generator-return-expressions">
  <title>ジェネレータでの return</title>

  <para>
   PHP 5.5 で導入されたジェネレータの機能拡張です。
   ジェネレータの内部で <literal>return</literal> 文が使えるようになりました。
   これを使えば、ジェネレータが最終的に返す式を指定できます (参照を返すことはできません)。
   この値を取得するには、新しいメソッド
   <literal>Generator::getReturn()</literal> を用います。
   このメソッドを使うのは、ジェネレータが値の生成を終えた後の一度だけになるでしょう。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen->getReturn(), PHP_EOL;
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
]]>
   </screen>
  </informalexample>

  <para>
   ジェネレータの最終値を明示的に返せる機能は、あれば便利なものです。
   ジェネレータを実行したクライアント側のコードが、
   ジェネレータが最後に返す値 (何らかのコルーチンの計算結果) を特別扱いできるようになるからです。
   「取得した値が最後の値かどうかをまず調べて、最後であれば特別扱いする」
   という処理をクライアント側で書くよりは、ずっとシンプルになります。
  </para>
 </sect2>
 <sect2 xml:id="migration70.new-features.generator-delegation">
  <title>ジェネレータの委譲</title>

  <para>
   ジェネレータを、別のジェネレータや
   <classname>Traversable</classname> オブジェクトそして配列に委譲できるようになりました。
   外側のジェネレータに決まり文句を書いたりする必要はなく、単に &yield.from; 構文を使うだけです。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
function gen()
{
    yield 1;
    yield 2;
    yield from gen2();
}

function gen2()
{
    yield 3;
    yield 4;
}

foreach (gen() as $val)
{
    echo $val, PHP_EOL;
}
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
1
2
3
4
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.intdiv">
  <title><function>intdiv</function> による整数の除算</title>

  <para>
   新しい <function>intdiv</function> 関数は、
   オペランドに対して整数の除算を行い、その結果を返します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(intdiv(10, 3));
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
int(3)
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.session-start-options">
  <title>セッションのオプション</title>

  <para>
   <function>session_start</function> にオプションの配列を渡せるようになりました。
   これは、php.ini などで設定した
   <link linkend="session.configuration">session 設定ディレクティブ</link>
   を上書きします。
  </para>

  <para>
   新たな設定オプション
   <link linkend="ini.session.lazy-write">session.lazy_write</link>
   をサポートするようになりました。これはデフォルトで有効になっており、
   セッションのデータが書き換えられたときにだけセッションファイルを上書きします。
   また、<literal>read_and_close</literal> も追加されました。
   このオプションは <function>session_start</function> だけに渡せるもので、
   セッションデータを読み込んだら何も変更せずその場でクローズするよう指示します。
  </para>

  <para>
   たとえば、
   <link linkend="ini.session.cache-limiter">session.cache_limiter</link>
   を <literal>private</literal> にして、読み込んだセッションをすぐにクローズさせるには次のようにします。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
session_start([
    'cache_limiter' => 'private',
    'read_and_close' => true,
]);
?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration70.new-features.preg-repace-callback-array-function">
  <title><function>preg_replace_callback_array</function></title>

  <para>
   新しい <function>preg_replace_callback_array</function> 関数は、
   <function>preg_replace_callback</function> 関数を使ったコードをよりすっきりと書けるようにするものです。
   これまでのバージョンの PHP では、正規表現ごとにコールバックを実行したければ、
   コールバック関数が分岐だらけになってしまっていました。
  </para>

  <para>
   PHP 7 以降では、個々の正規表現に対するコールバックを連想配列で登録できるようになりました。
   連想配列のキーが正規表現で、その値がコールバックとなります。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.csprng-functions">
  <title>CSPRNG 関数</title>

  <para>
   暗号学的にセキュアな整数値および文字列を生成する、
   プラットフォームに依存しない二つの新しい関数が追加されました。
   <function>random_bytes</function> と <function>random_int</function> です。
  </para>
 </sect2>

 <sect2 xml:id="migration70.new-features.list-arrayaccess">
  <title>
   <function>list</function> が常に、
   <classname>ArrayAccess</classname> を実装したオブジェクトをアンパックできるように
  </title>

  <para>
   これまでのバージョンでは、<classname>ArrayAccess</classname>
   を実装したオブジェクトに対して <function>list</function> が正常に機能しないことがありました。
   PHP 7 ではこの問題が修正されました。
  </para>
 </sect2>
 
 <sect2 xml:id="migration70.new-features.others">
  <title>その他の機能</title>
  <itemizedlist>
   <listitem>
    <simpara>
     クローンしたクラスのメンバーにアクセスできるようになりました。
     <literal>(clone $foo)-&gt;bar()</literal> のようにできるということです。
    </simpara>
   </listitem>
  </itemizedlist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
