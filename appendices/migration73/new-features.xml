<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: b37727abaf0e731a05c516fd85b44e86f4bf5c75 Maintainer: mumumu Status: ready -->

<sect1 xml:id="migration73.new-features" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>新機能</title>

 <sect2 xml:id="migration73.new-features.core">
  <title>PHP コア</title>

  <sect3 xml:id="migration73.new-features.core.heredoc">
   <title>ヒアドキュメントと Nowdoc構文 がより柔軟に</title>

   <para>
    文字列を閉じるマーカーの後に、セミコロンや改行文字を続ける必要はなくなりました。
    それに加えて、文字列を閉じるマーカーはインデントされていても構いません。
    この場合、インデントは文字列の全ての行から取り除かれます。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.core.destruct-reference">
   <title>配列へ分割して代入する操作が、リファレンスへの代入をサポート</title>

   <para>
    配列の要素に分割して代入する操作が、<literal>[&amp;$a, [$b, &amp;$c]] =
    $d</literal>
    という文法を用いて、リファレンスへの代入をサポートしました。
    同じ操作は、<function>list</function> 関数でもサポートされています。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.core.instanceof-literals">
   <title>instanceof 演算子が、リテラルを受け入れるように</title>

   <para>
    <literal>instanceof</literal>
    演算子が、最初のオペランドにリテラルを受け入れるようになりました。この場合、結果は常に
    &false; を返します。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.core.compileerror">
   <title>いくつかのコンパイルエラーが、CompileError 例外に</title>

   <para>
    <classname>CompileError</classname> 例外が新たに追加されました。これは
    <classname>ParseError</classname> クラスを継承しています。
    少ない数ですが、いくつかのコンパイルエラーが致命的なエラーを生成せず、<classname>CompileError</classname>
    例外をスローするようになります。
    現状は、この変更は <constant>TOKEN_PARSE</constant> モードで
    <function>token_get_all</function>
    が実行された場合にスローされる可能性があるコンパイルエラーだけに影響しますが、将来より多くのエラーがこの例外に変換される可能性があります。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.core.trailing-commas">
   <title>関数やメソッド呼び出しの後に、カンマを付けられるように</title>

   <para>
    関数やメソッド呼び出しの後に、カンマを付けられるようになりました。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.core.argon2id">
   <title>Argon2id のサポート</title>

   <para>
    configure コマンドに <option
    role="configure">--with-password-argon2[=dir]</option>
    オプションを与えることで、Argon2i と Argon2id ハッシュが <function>password_hash</function>, <function>password_verify</function>,
    <function>password_get_info</function>, および
    <function>password_needs_rehash</function>
    でサポートされるようになります。
    <constant>PASSWORD_ARGON2ID</constant>
    を使うことで、パスワードはハッシュ化され、検証されます。
    <function>password_*</function> 関数で Argon2i と Argon2id
    のサポートを使うには、PHP を libargon2 ≥
    20161029 とリンクする必要があります。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration73.new-features.fpm">
  <title>php-fpm</title>

  <para>
   FPM のロギングをカスタマイズするために、新しいオプションが追加されました。
   <variablelist>
    <varlistentry>
     <term><literal>log_limit</literal></term>
     <listitem>
      <simpara>
      このグローバルオプションは、1024文字以上のログを改行なしにロギングするために、ログの長さの限界を設定するために使います。これにより、様々な改行の問題も修正されます。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>log_buffering</literal></term>
     <listitem>
      <simpara>
       このグローバルオプションによって、追加のバッファリングなしに、実験的なロギングを行うことができます。
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><literal>decorate_workers_output</literal></term>
     <listitem>
      <simpara>
       このプールオプションを使うことで、 <literal>catch_workers_output</literal>
       が有効になった場合に、ワーカーの出力をデコレートする機能を無効にできます。
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </sect2>

 <sect2 xml:id="migration73.new-features.bc">
  <title>BC Math 関数</title>

  <para>
   <function>bcscale</function> 関数は、現在使われている基数を取得する getter
   としても使えるようになりました。
  </para>
 </sect2>

 <sect2 xml:id="migration73.new-features.ldap">
  <title>LDAP</title>

  <para>
   LDAPコントロールの完全なサポートが <link
   linkend="book.ldap">LDAP</link> クエリ関数と
   <function>ldap_parse_result</function> 関数に追加されました:
   <itemizedlist>
    <listitem>
     <simpara>
      コントロールをサーバーに送信するために <literal>$controls</literal>
      パラメータが <function>ldap_add</function>,
      <function>ldap_mod_replace</function>, <function>ldap_mod_add</function>,
      <function>ldap_mod_del</function>, <function>ldap_rename</function>,
      <function>ldap_compare</function>, <function>ldap_delete</function>,
      <function>ldap_modify_batch</function>,
      <function>ldap_search</function>, <function>ldap_list</function> および
      <function>ldap_read</function> 関数に追加されました。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      サーバーからコントロールを取得するために、出力パラメータ
      <literal>$controls</literal> が
      <function>ldap_parse_result</function> 関数に追加されました。
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      <function>ldap_get_option</function> と
      <function>ldap_set_option</function> 関数の
      <constant>LDAP_OPT_SERVER_CONTROLS</constant> と
      <constant>LDAP_OPT_CLIENT_CONTROLS</constant>
      のサポートが修正されました。
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </sect2>

 <sect2 xml:id="migration73.new-features.mbstring">
  <title>マルチバイト文字列関数</title>

  <sect3 xml:id="migration73.new-features.mbstring.case-mapping-folding">
   <title>完全なケースマッピングとケースフォールディングのサポート</title>

   <para>
    完全なケースマッピングとケースフォールディングのサポートが追加されました。
    シンプルな大文字小文字のマッピングと異なり、完全なケースマッピング
    では、文字列の長さが変わる場合があります。たとえば、以下のようになります:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
mb_strtoupper("Straße");
// Produces STRAßE on PHP 7.2
// Produces STRASSE on PHP 7.3
?>
]]>
     </programlisting>
    </informalexample>
    異なるケースマッピングやケースフォールディング
    のモードは、<function>mb_convert_case</function>
    関数で利用できます:
    <itemizedlist>
     <listitem>
      <simpara>
       <constant>MB_CASE_LOWER</constant> (<function>mb_strtolower</function>
       で使われています)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <constant>MB_CASE_UPPER</constant> (<function>mb_strtoupper</function>
       で使われています)
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       <constant>MB_CASE_TITLE</constant>
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       <constant>MB_CASE_FOLD</constant>
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       <constant>MB_CASE_LOWER_SIMPLE</constant>
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       <constant>MB_CASE_UPPER_SIMPLE</constant>
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       <constant>MB_CASE_TITLE_SIMPLE</constant>
      </simpara>
     </listitem> 
     <listitem>
      <simpara>
       <constant>MB_CASE_FOLD_SIMPLE</constant> (大文字小文字を区別しない操作で使います)
      </simpara>
     </listitem> 
    </itemizedlist>
    無条件に、言語に中立かつ完全なケースマッピングのみが行われます。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.mbstring.case-insensitive-ops">
   <title>大文字小文字を区別しない文字列操作は、ケースフォールディングを使う</title>

   <para>
    大文字小文字を区別しない文字列操作は、比較の際にケースマッピングではなく、ケースフォールディング
    を使うようになりました。
    これは、より多くの文字が (大文字小文字を区別しないという意味で) 等価と見做されるようになったことを意味します。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.mbstring.mb-case-title">
   <title>MB_CASE_TITLE による Title-Case 変換</title>

   <para>
    <function>mb_convert_case</function> 関数を
    <constant>MB_CASE_TITLE</constant>
    と使うと、Unicodeプロパティ由来の大文字小文字の区別の有無に基づいて、Title-case
    変換を行うようになりました。この変更は特に、クォートやアポストロフィーのハンドリングも改善します。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.mbstring.ucd11">
   <title>Unicode 11 のサポート</title>

   <para>
    <link linkend="book.mbstring">マルチバイト文字列</link>
    のデータテーブルは、Unicode 11 をサポートするように更新されました。
   </para> 
  </sect3>

  <sect3 xml:id="migration73.new-features.mbstring.long-strings">
   <title>長い文字列のサポート</title>

   <para>
    <link linkend="ref.mbstring">マルチバイト文字列関数</link> は 
    2GB 以上の文字列を正しくサポートするようになりました。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.mbstring.performance">
   <title>パフォーマンスの向上</title>

   <para>
    <link linkend="book.mbstring">マルチバイト文字列</link>
    拡張モジュールのパフォーマンスが全体的に大きく向上しました。大文字小文字のケースの変換関数で、一番大きな改善が見られます。
   </para>
  </sect3>

  <sect3 xml:id="migration73.new-features.mbstring.named-captures">
   <title>名前付きキャプチャのサポート</title>

   <para>
    <literal>mb_ereg_*</literal>
    関数は、名前付きキャプチャをサポートしました。
    <function>mb_ereg</function> のようなマッチング関数は
    グループ番号と名前の両方を使って名前付きキャプチャを返します。これは PCRE
    に似た動作です:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
mb_ereg('(?<word>\w+)', '国', $matches);
// => [0 => "国", 1 => "国", "word" => "国"];
?>
]]>
     </programlisting>
    </informalexample>
    これに加えて、 <function>mb_ereg_replace</function> 関数は
    置換文字列で名前付きキャプチャを参照するために
    <code>\k&lt;&gt;</code> と <code>\k''</code> 記法をサポートしました:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
mb_ereg_replace('\s*(?<word>\w+)\s*', "_\k<word>_\k'word'_", ' foo ');
// => "_foo_foo_"
?>
]]>
     </programlisting>
    </informalexample>
    <code>\k&lt;&gt;</code> and <code>\k''</code>
    記法は、数値参照にも使えます。これは、9以上のグループ番号でも動作します。
   </para>
  </sect3>

 </sect2>

 <sect2 xml:id="migration73.new-features.realine">
  <title>Readline</title>

  <para>
   <literal>completion_append_character</literal> と
   <literal>completion_suppress_append</literal> オプションのサポートが 
   <function>readline_info</function> 関数に追加されました。
   これらのオプションは PHP が (libedit ではなく) libreadline
   とリンクされた場合のみ利用できます。
  </para>
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
