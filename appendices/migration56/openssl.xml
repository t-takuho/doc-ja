<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 497c40ac164d5873fd87f622dfdeb5206392b446 Maintainer: takagi Status: ready -->

<sect1 xml:id="migration56.openssl" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>PHP 5.6.x における OpenSSL 関連の変更</title>

 <sect2 xml:id="migration56.openssl.peer-verification">
  <title>ストリームラッパーが、SSL/TLS を使っている場合のピア証明書とホスト名の検証にデフォルトで対応</title>

  &migration56.openssl.peer-verification;
 </sect2>

 <sect2 xml:id="migration56.openssl.fingerprint">
  <title>証明書のフィンガープリント</title>

  <para>
   証明書のフィンガープリントの抽出と、その検証に対応しました。
   新たに追加された <function>openssl_x509_fingerprint</function> 関数が、
   X.509 証明書からフィンガープリントを抽出します。また、
   <link linkend="context.ssl">SSL ストリームコンテキスト</link>
   に二つのオプションが追加されました。
   <literal>capture_peer_cert</literal> はピアの X.509 証明書を取り込み、
   <literal>peer_fingerprint</literal> はピアの証明書が指定したフィンガープリントにマッチすることを確かめます。
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.ciphers">
  <title>デフォルトの暗号の更新</title>

  <para>
   PHP がデフォルトで使う暗号が更新され、
   <link xlink:href="&url.openssl.ciphers.mozilla;">Mozilla cipher recommendations</link>
   に基づいた、よりセキュアなリストになりました。
   リストにない例外は、anonymous Diffie-Hellman ciphers と RC4 です。
  </para>

  <para>
   新しい定数
   <constant>OPENSSL_DEFAULT_STREAM_CIPHERS</constant> で、この一覧にアクセスできます。
   また、(過去のバージョンの PHP のように) 上書きもできます。上書きをするには、コンテキストオプション
   <link linkend="context.ssl.ciphers"><parameter>ciphers</parameter></link>
   を設定します。
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.tls-compression">
  <title>デフォルトでの圧縮の無効化</title>

  <para>
   SSL/TLS の圧縮が、デフォルトで無効になりました。これは、CRIME 攻撃への対応です。
   PHP 5.4.13 で新たにコンテキストオプション
   <link linkend="context.ssl.disable-compression"><parameter>disable_compression</parameter></link>
   が加わり、圧縮を無効にできるようになりました。そのデフォルト値が &true; （つまり圧縮が無効になっている)
   に変わったのです。
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.honor-cipher-order">
  <title>サーバーの暗号の優先が可能に</title>

  <para>
   SSL コンテキストオプション <parameter>honor_cipher_order</parameter>
   が追加されました。これによって、暗号化されたストリームサーバーでの BEAST
   脆弱性を除去するために、サーバーの暗号をクライアントよりも優先させられるようになります。
  </para>
 </sect2>

 <sect2 xml:id="migration56.openssl.metadata">
  <title>ネゴシエート済みのプロトコルと暗号へのアクセス</title>

  <para>
   暗号化ストリームでネゴシエート済みのプロトコルと暗号へのアクセスが、
   <function>stream_get_meta_data</function> あるいは
   <function>stream_context_get_options</function> でできるようになりました。
   これは、SSL コンテキストオプション
   <parameter>capture_session_meta</parameter> が &true; になっている場合に有効です。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$ctx = stream_context_create(['ssl' => [
    'capture_session_meta' => TRUE
]]);
 
$html = file_get_contents('https://google.com/', FALSE, $ctx);
$meta = stream_context_get_options($ctx)['ssl']['session_meta'];
var_dump($meta);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(4) {
  ["protocol"]=>
  string(5) "TLSv1"
  ["cipher_name"]=>
  string(20) "ECDHE-RSA-AES128-SHA"
  ["cipher_bits"]=>
  int(128)
  ["cipher_version"]=>
  string(11) "TLSv1/SSLv3"
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.forward-secrecy">
  <title>暗号化ストリームサーバーでの前方秘匿性に関する新たなオプション</title>

  <para>
   暗号化クライアントストリームはすでに前方秘匿性に対応しています。
   というのも、一般に前方秘匿性は、サーバーが制御するものだからです。
   PHP の暗号化サーバーストリームが使っている証明書は前方秘匿性に対応しており、
   何もしなくても有効になっています。
   しかし、前方秘匿性に関してより決め細やかな制御をしたり、
   互換性に関する問題に対応したりするために、
   新たな SSL コンテキストオプションがいくつか追加されました。
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>ecdh_curve</parameter></term>
    <listitem>
     <para>
      このオプションで、ECDH 暗号で使う曲線を選択できるようになります。
      省略した場合は <literal>prime256v1</literal> を使います。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>dh_param</parameter></term>
    <listitem>
     <para>
      Diffie-Hellman 鍵交換用のパラメータを含むファイルへのパス。
      このファイルは、たとえば以下のようなコマンドで生成したものです。
     </para>
     <programlisting role="shell">
<![CDATA[
openssl dhparam -out /path/to/my/certs/dh-2048.pem 2048
]]>
     </programlisting>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_dh_use</parameter></term>
    <listitem>
     <para>
      &true; にすると、Diffie-Hellman パラメータを使うときに、
      新たな鍵ペアを作成します。これにより、前方秘匿性が向上します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>single_ecdh_use</parameter></term>
    <listitem>
     <para>
      &true; にすると、ECDH 暗号スイートでのネゴシエート時に
      新たな鍵ペアを作成します。これにより、前方秘匿性が向上します。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>

 <sect2 xml:id="migration56.openssl.crypto-method">
  <title>SSL/TLS のバージョンの選択</title>

  <para>
   SSL や TLS の、特定のバージョンを指定できるようになりました。SSL コンテキストオプション
   <parameter>crypto_method</parameter> を利用するか、
   あるいはストリームラッパーの作成時に
   (<function>stream_socket_client</function> あるいは
   <function>stream_socket_server</function> を呼んで)
   トランスポートを指定します。
  </para>

  <para>
   SSL コンテキストオプション <parameter>crypto_method</parameter> には、
   <function>stream_socket_enable_crypto</function> 関数の
   <parameter>crypto_type</parameter> と同様に、
   許可するプロトコルをビットマスクで指定します。
   <!-- TODO: link to full list, which is too big for this page but should be
              in the crypto_method and stream_socket_enable_crypto()
              documentation. -->
  </para>

  <segmentedlist>
   <title>プロトコルのバージョンと、対応するオプション</title>
   <segtitle>プロトコル</segtitle>
   <segtitle>クライアントのフラグ</segtitle>
   <segtitle>サーバーのフラグ</segtitle>
   <segtitle>トランスポート</segtitle>
   <seglistitem>
    <seg>任意のバージョンの TLS あるいは SSL</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_ANY_SERVER</constant></seg>
    <seg><literal>ssl://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>任意のバージョンの TLS</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLS_SERVER</constant></seg>
    <seg><literal>tls://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.0</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_0_SERVER</constant></seg>
    <seg><literal>tlsv1.0://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.1</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_1_SERVER</constant></seg>
    <seg><literal>tlsv1.1://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>TLS 1.2</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_TLSv1_2_SERVER</constant></seg>
    <seg><literal>tlsv1.2://</literal></seg>
   </seglistitem>
   <seglistitem>
    <seg>SSL 3</seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_CLIENT</constant></seg>
    <seg><constant>STREAM_CRYPTO_METHOD_SSLv3_SERVER</constant></seg>
    <seg><literal>sslv3://</literal></seg>
   </seglistitem>
  </segmentedlist>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php

// file_get_contents() を使うには TLS 1.0 以降が必要です
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLS_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// TLS 1.1 あるいは 1.2 が必要です
$ctx = stream_context_create([
    'ssl' => [
        'crypto_method' => STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT |
                           STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT,
    ],
]);
$html = file_get_contents('https://google.com/', false, $ctx);

// 接続時に tlsv1.2:// ストリームソケットトランスポートを利用します
$sock = stream_socket_client('tlsv1.2://google.com:443/');

?>
]]>
   </programlisting>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.default-certificate-paths">
  <title><function>openssl_get_cert_locations</function> の追加</title>

  <para>
   <function>openssl_get_cert_locations</function> 関数が追加されました。
   この関数は、PHP が CA バンドルを探す際のデフォルトの場所を返します。
  </para>

  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
var_dump(openssl_get_cert_locations());
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
array(8) {
  ["default_cert_file"]=>
  string(21) "/etc/pki/tls/cert.pem"
  ["default_cert_file_env"]=>
  string(13) "SSL_CERT_FILE"
  ["default_cert_dir"]=>
  string(18) "/etc/pki/tls/certs"
  ["default_cert_dir_env"]=>
  string(12) "SSL_CERT_DIR"
  ["default_private_dir"]=>
  string(20) "/etc/pki/tls/private"
  ["default_default_cert_area"]=>
  string(12) "/etc/pki/tls"
  ["ini_cafile"]=>
  string(0) ""
  ["ini_capath"]=>
  string(0) ""
}
]]>
   </screen>
  </informalexample>
 </sect2>

 <sect2 xml:id="migration56.openssl.spki">
  <title>SPKI のサポート</title>

  <para>
   署名された公開鍵およびチャレンジ (SPKAC) の生成や抽出、そして検証のサポートが追加されました。
   新たに追加された関数 <function>openssl_spki_new</function>、
   <function>openssl_spki_verify</function>、
   <function>openssl_spki_export_challenge</function> そして
   <function>openssl_spki_export</function> で、
   SPKAC が HTML5 の <literal>KeyGen</literal> 要素から生成した
   <acronym>PEM</acronym> 公開鍵とチャレンジの作成、検証、エクスポートを行います。
  </para>

  <variablelist>
   <varlistentry>
    <term><parameter>openssl_spki_new</parameter></term>
    <listitem>
     <para>
      秘密鍵とチャレンジ文字列、そしてハッシュアルゴリズムを指定して、
      新しい SPKAC を生成します。
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
SPKAC=MIIBXjCByDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA3L0IfUijj7+A8CPC8EmhcdNoe5fUAog7OrBdhn7EkxFButUp40P7+LiYiygYG1TmoI/a5EgsLU3s9twEz3hmgY9mYIqb/rb+SF8qlD/K6KVyUORC7Wlz1Df4L8O3DuRGzx6/+3jIW6cPBpfgH1sVuYS1vDBsP/gMMIxwTsKJ4P0CAwEAARYkYjViMzYxMTktNjY5YS00ZDljLWEyYzctMGZjNGFhMjVlMmE2MA0GCSqGSIb3DQEBAwUAA4GBAF7hu0ifzmjonhAak2FhhBRsKFDzXdKIkrWxVNe8e0bZzMrWOxFM/rqBgeH3/gtOUDRS5Fnzyq425UsTYbjfiKzxGeCYCQJb1KJ2V5Ij/mIJHZr53WYEXHQTNMGR8RPm7IxwVXVSHIgAfXsXZ9IXNbFbcaLRiSTr9/N4U+MXUWL7
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_verify</parameter></term>
    <listitem>
     <para>
      指定した SPKAC を検証します。
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
var_dump(openssl_spki_verify($spkac));
?>
]]>
      </programlisting>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export_challenge</parameter></term>
    <listitem>
     <para>
      指定した SPKAC から、関連付けられたチャレンジをエクスポートします。
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
$challenge = openssl_spki_export_challenge($spkac);
echo $challenge;
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
challenge string
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><parameter>openssl_spki_export</parameter></term>
    <listitem>
     <para>
      <acronym>PEM</acronym> フォーマットされた RSA 公開鍵を、SPKAC からエクスポートします。
     </para>

     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$pkey = openssl_pkey_new();
openssl_pkey_export($pkey, 'secret passphrase');

$spkac = openssl_spki_new($pkey, 'challenge string');
echo openssl_spki_export($spkac);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
-----BEGIN PUBLIC KEY-----
MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcvQh9SKOPv4DwI8LwSaFx02h7
l9QCiDs6sF2GfsSTEUG61SnjQ/v4uJiLKBgbVOagj9rkSCwtTez23ATPeGaBj2Zg
ipv+tv5IXyqUP8ropXJQ5ELtbXPUN/gvw7cO5EbPHr/7eMhbpw8Gl+AfWxW5hLW8
MGw/+AwwjHBOwong/QIDAQAB
-----END PUBLIC KEY-----
]]>
      </screen>
     </informalexample>
    </listitem>
   </varlistentry>
  </variablelist>
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
