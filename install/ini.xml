<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d5d10b38b4395e77827b04d5290bb137bd3872b4 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: mumumu -->

<chapter xml:id="configuration" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>実行時設定</title>

  <sect1 xml:id="configuration.file">
   <title>設定ファイル</title>

   <simpara>
    設定ファイル (&php.ini;) は PHP の起動時に読み込まれます。
    PHP のサーバーモジュール版では、Web サーバーの起動時に
    一度だけ読み込まれます。<acronym>CGI</acronym> 版と
    <acronym>CLI</acronym> 版では、スクリプトが呼び出される度に読み込まれます。
   </simpara>
   <para>
    読み込む &php.ini; は、これらの場所を順に探します。
    <itemizedlist>
     <listitem>
      <simpara>
       SAPI モジュール特有の場所 (Apache 2 における
       <literal>PHPIniDir</literal> ディレクティブ、
       CGI/CLI 版における <literal>-c</literal> コマンドラインオプション)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <varname>PHPRC</varname> 環境変数。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       PHP のバージョンごとに別の場所の <literal>php.ini</literal>
       を使用することができます。レジストリキーの root は、
       インストールされたOS や PHP が 32bit や 64bit どちらのビルドかによって変わります。
       32bit OS 上の 32bit ビルドの PHP、
       もしくは 64bit OS 上の 64bit ビルドの PHP は
       <literal>[(HKEY_LOCAL_MACHINE\SOFTWARE\PHP]</literal> を使いますが、
       64bit OS 上での 32bit ビルドのPHPは、
       <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\PHP]</literal>] を代わりに使います。
       ビルドのbit数がOSと同じPHPのインストールの場合、
       以下のレジストリキーを順に調べて使用します。
       <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y.z]</literal>、
       <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x.y]</literal> および
       <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP\x]</literal>。
       x、y および z はそれぞれ PHP のメジャーバージョン、マイナーバージョン、
       リリース番号を表します。
       64bit OS の 32bitビルドの PHP では、
       以下のレジストリキーを順に調べて使用します。
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6421Node\PHP\x.y.z]</literal>,
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6421Node\PHP\x.y]</literal> および
      <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6421Node\PHP\x]</literal>
       x、y および z はそれぞれ PHP のメジャーバージョン、マイナーバージョン、
       リリース番号を表します。
       これらのキーに <literal>IniFilePath</literal>
       の値が設定されていれば、最初に見つかった場所の <literal>php.ini</literal>
       を使用します (Windows のみ)。
      </simpara>
     </listitem>
     <listitem>
      <simpara>
        <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\PHP]</literal> または
        <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\WOW6432Node\PHP]</literal> にある
        <literal>IniFilePath</literal> の値 (Windows のみ)。
      </simpara>
     </listitem>
     <listitem>
      <para>
       現在の作業ディレクトリ (CLI を除く)
      </para>
     </listitem>
     <listitem>
      <simpara>
       Web サーバーのディレクトリ (SAPI モジュールの場合)、
       もしくは PHP ディレクトリ (そうでない Windows の場合)
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Windows ディレクトリ (<filename class="directory">C:\windows</filename>
       もしくは <filename class="directory">C:\winnt</filename>))
       (Windows の場合) 、もしくはコンパイル時のオプション
       <literal>--with-config-file-path</literal>
      </simpara>
     </listitem>
    </itemizedlist>
   </para>
   <para>
    <filename>php-SAPI.ini</filename> (ここで SAPI は使用する SAPI 名。
    たとえば <filename>php-cli.ini</filename> や <filename>php-apache.ini</filename>)
    が存在する場合、
    &php.ini; の代わりに使用されます。
    SAPI 名は <function>php_sapi_name</function> によって決定されます。
   </para>
   <note>
    <para>
     Apache web サーバーは、スタート時にディレクトリをルート
     に変更するので、ファイルシステムのルートに &php.ini;
     が存在する場合、PHP はそれを読もうとします。
    </para>
   </note>
  <para>
   &php.ini; の中で環境変数を使うには、次のようにします。
  </para>
  <para>
   <example>
    <title>&php.ini; での環境変数</title>
     <programlisting role="ini">
<![CDATA[
; 環境変数 PHP_MEMORY_LIMIT を利用します
memory_limit = ${PHP_MEMORY_LIMIT}
]]>
     </programlisting>
    </example>
  </para>
   <para>
    拡張モジュールに対する &php.ini; ディレクティブは、
    各拡張モジュールのドキュメントで解説されています。
    <link linkend="ini">コア ディレクティブ</link>
    （PHP 本体に対するディレクティブ）のリストは付録にまとめられています。
    ただし、（更新の都合上）すべての PHP ディレクティブが
    本マニュアル中で解説されている訳ではありません。
    使っているバージョンの PHP で指定可能なすべてのディレクティブについては、
    &php.ini; ファイル内に詳細なコメントが記されていますので、参照ください。
    もしくは、Git から入手可能な <link xlink:href="&url.php.git.phpini;">
    最新の &php.ini;</link> も有用でしょう。
   </para>
   <para>
    <example>
     <title>&php.ini; の例</title>
     <programlisting role="ini">
<![CDATA[
; 引用符をつけないセミコロン(;)の後のテキストは、すべて無視されます
[php] ; セクションマーカ (角括弧の中のテキスト) は無視されます
; 論理値は、次のいずれかで指定します
;    true, on, yes
; または false, off, no, none
register_globals = off
magic_quotes_gpc = yes

; 文字列を二重引用符で括ることも可能です
include_path = ".:/usr/local/lib/php"

; バックスラッシュは他の文字と同様に処理されます
include_path = ".;c:\php\lib"
]]>
</programlisting>
<!-- TODO: add more details about values and expressions -->
    </example>
   </para>
   <para>
    ini ファイル内で既存の ini 変数を参照することが可能です。
    例: <literal>open_basedir = ${open_basedir}
    ":/new/dir"</literal>
   </para>
  <sect2 xml:id="configuration.file.scan">
   <title>スキャンディレクトリ</title>

   <para>
    PHP の設定で、&php.ini; を読んだ後に .ini ファイルを探すディレクトリを指定できます。
    これは、コンパイル時のオプション
    <option role="configure">--with-config-file-scan-dir</option> で設定します。
    このスキャンディレクトリは実行時に上書きできます。
    環境変数 <varname>PHP_INI_SCAN_DIR</varname> で指定します。
   </para>

   <para>
    複数のディレクトリを指定するには、各プラットフォームのパス区切り文字
    (Window や NetWare そして RISC OS の場合は <literal>;</literal>、
    その他のプラットフォームの場合は <literal>:</literal>。PHP が用いる値は定数
    <constant>PATH_SEPARATOR</constant> で取得できます)
    を用います。<varname>PHP_INI_SCAN_DIR</varname> に空文字列が指定された場合は、
    PHP のコンパイル時に
    <option role="configure">--with-config-file-scan-dir</option>
    で指定されたディレクトリもスキャンします。
   </para>

   <para>
    指定されたディレクトリの中にあるファイルの中で、ファイル名が
    <literal>.ini</literal> で終わるすべてのファイルを、アルファベット順にスキャンします。
    読み込まれたファイルの一覧とその順序を調べるには、
    <function>php_ini_scanned_files</function> を呼ぶか、あるいは
    <option>--ini</option> オプションつきで PHP を実行します。
   </para>

   <informalexample>
    <screen>
<![CDATA[
PHP のコンパイル時に --with-config-file-scan-dir=/etc/php.d
を指定しており、パス区切り文字が : であるものとします

$ php
  PHP は /etc/php.d/*.ini を設定ファイルとして読み込みます。

$ PHP_INI_SCAN_DIR=/usr/local/etc/php.d php
  PHP は /usr/local/etc/php.d/*.ini を設定ファイルとして読み込みます。

$ PHP_INI_SCAN_DIR=:/usr/local/etc/php.d php
  PHP はまず /etc/php.d/*.ini を設定ファイルとして読み込み、
  続いて /usr/local/etc/php.d/*.ini も設定ファイルとして読み込みます。

$ PHP_INI_SCAN_DIR=/usr/local/etc/php.d: php
  PHP はまず /usr/local/etc/php.d/*.ini を設定ファイルとして読み込み、
  続いて /etc/php.d/*.ini を設定ファイルとして読み込みます。
]]>
    </screen>
   </informalexample>
  </sect2>
  </sect1>
  
  <sect1 xml:id="configuration.file.per-user">
   <title>.user.ini ファイル</title>
   
   <simpara>
    PHP はディレクトリ単位での
    INI ファイルをサポートしています。
    このファイルは、CGI/FastCGI SAPI の場合にのみ処理されます。
    この機能は、PECL htscanner 拡張モジュールを置き換えるものです。
    Apache モジュールとして PHP を実行している場合は &htaccess; ファイルを使えば同じ機能を実現できます。
   </simpara>
   
   <simpara>
    メイン &php.ini; ファイルに加えて、PHP が各ディレクトリの INI ファイルをスキャンします。
    リクエストされた PHP ファイルがあるディレクトリから始まり、
    現在のドキュメントルート (<varname>$_SERVER['DOCUMENT_ROOT']</varname>)
    まで順にたどっていきます。PHP ファイルがドキュメントルート配下以外の場所にある場合は、
    PHP ファイルがあるディレクトリだけをスキャンします。
   </simpara>
   <simpara>
    .user.ini 形式の INI ファイルがサポートするのは、
    モードが <constant>INI_PERDIR</constant> および
    <constant>INI_USER</constant> の項目のみです。
   </simpara>
   
   <simpara>
    ふたつの新しい INI ディレクティブ
    <link linkend="ini.user-ini.filename">user_ini.filename</link> および
    <link linkend="ini.user-ini.cache-ttl">user_ini.cache_ttl</link>
    で、ユーザー INI ファイルの使用法を制御します。
   </simpara>
   
   <simpara>
    <link linkend="ini.user-ini.filename">user_ini.filename</link>
    は、PHP が各ディレクトリで探すファイルの名前を設定します。
    空文字列を指定した場合は何も探しません。デフォルトは
    <literal>.user.ini</literal> です。
   </simpara>
   
   <simpara>
    <link linkend="ini.user-ini.cache-ttl">user_ini.cache_ttl</link>
    は、ユーザー INI ファイルの再読込頻度を設定します。
    デフォルトは 300 秒 (5 分) です。
   </simpara>
  </sect1>

  <sect1 xml:id="configuration.changes.modes">
   <title>どこで設定を行うのか</title>

   <para>
    これらのモードは、ある PHP ディレクティブがいつどこで設定できるのかを表すものです。
    マニュアルに記載されているすべてのディレクティブには、これらのモードのいずれかが指定されています。
    たとえば、PHP スクリプト中で <function>ini_set</function>
    で設定できるものもあれば &php.ini; や &httpd.conf;
    でなければ設定できないものもあります。
   </para>

   <para>
    たとえば <link linkend="ini.output-buffering">output_buffering</link> は
    <constant>INI_PERDIR</constant> なので、
    <function>ini_set</function> で設定することはできません。
    一方 <link linkend="ini.display-errors">display_errors</link> は
    <constant>INI_ALL</constant> なのでどこででも設定でき、当然
    <function>ini_set</function> ででも設定できます。
   </para>

   <para>
    <variablelist>
<!--
Replace everything inside the <variablelist> element with an <xi:include>
once libxml2 gets XInclude 1.1 attribute copying support.
The below <xi:include> will include the appropriate elements
but needs all top-level xml:id's removed (see XInclude 1.1 set-xml-id).
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('constant.ini-mode')/*)"><xi:fallback/></xi:include>
-->
     <title>INI モードの定数</title>
     <varlistentry>
      <term>
       <constant>INI_USER</constant>
       (<type>int</type>)
      </term>
      <listitem>
       <simpara>
        エントリはユーザー定義のスクリプト(<function xmlns="http://docbook.org/ns/docbook">ini_set</function>)
        や <link xmlns="http://docbook.org/ns/docbook" linkend="configuration.changes.windows">Windows レジストリ</link> を使って) で設定できます。 
        &user-ini; でも設定できます
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <constant>INI_PERDIR</constant>
       (<type>int</type>)
      </term>
      <listitem>
       <simpara>
        エントリは &php.ini;, &htaccess;, &httpd.conf;, &user-ini; で設定できます
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <constant>INI_SYSTEM</constant>
       (<type>int</type>)
      </term>
      <listitem>
       <simpara>
        エントリは &php.ini; または &httpd.conf; で設定できます
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term>
       <constant>INI_ALL</constant>
       (<type>int</type>)
      </term>
      <listitem>
       <simpara>
        エントリはどこでも設定できます
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </para>
  </sect1>

  <sect1 xml:id="configuration.changes">
   <title>設定を変更するには</title>

   <sect2 xml:id="configuration.changes.apache">
    <title>Apache モジュールとして PHP を実行している場合</title>
    <simpara>
     PHP を Apache モジュールとして使用している場合、Apache 設定ファイル (例、&httpd.conf;)
     もしくは &htaccess; ファイルにディレクティブを記述することで、PHP の設定の変更を行うことが
     可能です。このようにして設定変更を行うには、"AllowOverride Options" もしくは
     "AllowOverride All" 権限が必要です。
    </simpara>

    <para>
     Apache 設定ファイルから PHP の設定を変更するには、
     以下に示す Apache ディレクティブを使用します。
     各設定オプションの変更の可否 (<constant>INI_ALL</constant>,
     <constant>INI_PERDIR</constant>, または <constant>INI_SYSTEM</constant>)
     については、付録
     <link linkend="ini.list">php.ini ディレクティブのリスト</link>
     を参照ください。
    </para>

    <para>
     <variablelist>
      <varlistentry>
       <term>
        <systemitem role="directive">php_value</systemitem>
        <parameter>name</parameter>
        <parameter>value</parameter>
       </term>
       <listitem>
        <para>
         指定した設定オプションに値を設定します。変更の可否が、
         <constant>INI_ALL</constant> もしくは
         <constant>INI_PERDIR</constant> である設定オプションに対し利用できます。
         セット済みの値をクリアしたい場合は、<literal>none</literal> を
         値として使用してください。
        </para>
        <note>
         <simpara>
          論理値を設定する場合には <systemitem role="directive">php_value</systemitem>
          を使用しないでください。代わりに、<systemitem role="directive">php_flag</systemitem>
          （下記参照）を使用する必要があります。
         </simpara>
        </note>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_flag</systemitem>
        <parameter>name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         設定オプションに論理値を設定するために使用します。変更の可否が、
         <constant>INI_ALL</constant> もしくは
         <constant>INI_PERDIR</constant> である設定オプションで利用できます。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_value</systemitem>
        <parameter>name</parameter>
        <parameter>value</parameter>
       </term>
       <listitem>
        <para>
         指定した設定オプションに値を設定します。このディレクティブは、&htaccess;
         ファイルでは利用できません。また、
         <systemitem role="directive">php_admin_value</systemitem>
         で設定された設定オプションの値は、&htaccess;
         や <function>ini_set</function> では上書きできません。
         セット済みの値をクリアしたい場合は、<literal>none</literal>
         を値として使用してください。
        </para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>
        <systemitem role="directive">php_admin_flag</systemitem>
        <parameter>name</parameter>
        <parameter>on|off</parameter>
       </term>
       <listitem>
        <para>
         設定オプションに論理値を設定するために使用します。
         このディレクティブは、&htaccess; ファイルでは利用できません。
         php_admin_value で設定された設定オプションの値は、&htaccess;
         や <function>ini_set</function> では上書きできません。
        </para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     <example>
      <title>Apache 設定の例</title>
      <programlisting role="ini">
<![CDATA[
<IfModule mod_php5.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
<IfModule mod_php4.c>
  php_value include_path ".:/usr/local/lib/php"
  php_admin_flag engine on
</IfModule>
]]>
      </programlisting>
     </example>
    </para>
    <caution>
     <para>
      PHP 定数は PHP 以外では使用できません。たとえば、
      <filename>httpd.conf</filename> の中で
      <link linkend="ini.error-reporting">error_reporting</link>
      オプションを設定しようとして <constant>E_ALL</constant>
      や <constant>E_NOTICE</constant> のような PHP 定数を使用することは
      できません。これらは意味を有さないため、
      <emphasis>0</emphasis> と評価されてしまいます。
      代わりに、対応するビットマスク値を使用してください。
      &php.ini; の中では、これらの PHP 定数を使用することができます。
     </para>
    </caution>
   </sect2>

   <sect2 xml:id="configuration.changes.windows">
    <title>Windows レジストリによる PHP の設定の変更</title>
    <simpara>
     Windows 上で PHP を実行している場合、Windows レジストリを使用して設定値を
     ディレクトリ毎に変更することができます。
     設定値は、レジストリキー <literal>HKLM\SOFTWARE\PHP\Per Directory Values</literal>
     に保存され、そのサブキーがパス名となります。例えば、ディレクトリ
     <literal>c:\inetpub\wwwroot</literal> に対する設定値は、 キー
     <literal>HKLM\SOFTWARE\PHP\Per Directory Values\c\inetpub\wwwroot</literal>
     に保存されます。ディレクトリに対する設定は、そのディレクトリ、
     およびそのサブディレクトリで実行されるすべてのスクリプトで有効となります。
     PHP 設定オプションのディレクティブを名前とする文字列値をキーに登録してください。
     また、値のデータに PHP 定数を記述しても解釈されませんので、注意してください。
     しかし、<constant>INI_USER</constant>
     で変更可能な設定値はこの方法で設定することが可能ですが、
     <constant>INI_PERDIR</constant> である設定値は設定できません。
     なぜなら、これらの設定値はリクエストがあるたびに読み直されるからです。
    </simpara>
   </sect2>

   <sect2 xml:id="configuration.changes.other">
    <title>他の方法</title>
    <para>
     どのように PHP を実行しているかに係わらず、<function>ini_set</function> 関数を
     用いて、スクリプトの実行時に一部のオプションの設定値を変更することができます。詳細は、
     <function>ini_set</function> 関数のリファレンスを参照ください。
    </para>
    <para>
     使用しているシステムにおける現在のオプション設定値の完全なリストを得たい場合は、
     <function>phpinfo</function> 関数を実行し、出力された結果を参照ください。
     また、<function>ini_get</function> 関数または <function>get_cfg_var</function>
     関数を用いて、個々のオプションの設定値にアクセスすることも可能です。
    </para>
   </sect2>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
