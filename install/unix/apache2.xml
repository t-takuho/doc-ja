<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e51792efe0f103ec8724ad199524d7543610c978 Maintainer: haruki Status: ready -->
<!-- Credits: hirokawa, haruki -->
<sect1 xml:id="install.unix.apache2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Apache 2.x (Unixシステム用)</title>

 <para>
  このセクションでは、PHPを Unix システム上の Apache 2.x にインストールする際の
  手引きと注意事項について説明します。
 </para>
   
 &warn.apache2.compat;
    
 <para>
  <link xlink:href="&url.apache2.docs;">Apache ドキュメンテーション</link>
  を参照し、Apache 2.x の基本的な事項について理解しておくことを強く推奨します。
  Apache のインストールオプションについてのより詳しい情報が得られます。
 </para>

 <para>
  最新バージョンの Apache HTTP Server を
  <link xlink:href="&url.apache;">Apache ダウンロードサイト</link>
  からダウンロードし、上述のいずれかのバージョンの PHP を用意してください。
  この手引きでは Apache 2.x で PHP を動作させるための
  基本的な部分しかカバーしていません。さらに詳しい情報については、<link
  xlink:href="&url.apache2.docs;">Apache ドキュメンテーション</link> を参照ください。
  情報が古く不正確になってしまうため、以下では詳細なバージョン番号は
  記述されていません。'NN' という文字列をご使用のバージョンに適宜置き換えて
  ください。
 </para>

 <para>
  現在、Apache 2.x には 2.4 と 2.2 の二種類があります。
  どちらを選ぶにしてもそれなりの理由があるでしょうが、
  2.4 が現在の最新版です。もし選択の余地があるのなら
  2.4 を使うことを推奨します。しかし、この例では 2.4 と 2.2
  のどちらでも使えるようにしています。
  Apache httpd 2.2 は正式には廃止予定で、新しい開発やパッチが
  発行されないことに注意してください。
 </para>

 <orderedlist>
  <listitem>
   <para>
    Apache HTTP server を上のサイトから取得して展開します。
   </para>

   <informalexample>
    <screen>
<![CDATA[
tar -xzf httpd-2.x.NN.tar.gz
]]>
    </screen>
   </informalexample>
  </listitem>

  <listitem>
   <para>
    同じく、PHP のソースを取得して展開します。
   </para>

   <informalexample>
    <screen>
<![CDATA[
tar -xzf php-NN.tar.gz
]]>
    </screen>
   </informalexample>
  </listitem>
   
  <listitem>
   <para>
    Apache をビルドしてインストールします。Apache のビルドに関する詳細は
    Apache のドキュメントを参照ください。
   </para>

   <informalexample>
    <screen>
<![CDATA[
cd httpd-2_x_NN
./configure --enable-so
make
make install
]]>
    </screen>
   </informalexample>
  </listitem>

  <listitem>
   <para>
    以上で Apache 2.x.NN が、モジュールの動的ロードとデフォルトの
    MPM（マルチプロセッシングモジュール）である prefork が有効になった
    状態で、/usr/local/apache2 にインストールされます。
    インストールが正常か調べるには、以下のようにして Apache サーバーを立ち上げます。

    <informalexample>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
     </screen>
    </informalexample>

    サーバーを止めて、PHP 用の設定を進めましょう。

    <informalexample>
     <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl stop
]]>
     </screen>
    </informalexample>
   </para>
  </listitem>

  <listitem>
   <para>
    PHP の configure を行います。ここでは、様々なオプションを指定し、
    特定の拡張モジュールを有効にするといったカスタマイズを行います。
    指定可能なオプションの一覧は、<command>./configure --help</command> を実行すると得られます。
    以下に、Apache 2 と MySQL のサポートを有効にする、簡単な設定例を示します。
   </para>

   <para>
    上で説明したように Apache をソースからビルドした場合は、
    <command>apxs</command> のパスも下の例のとおりになっているでしょう。しかし、
    もし別の方法で Apache をインストールした場合は <command>apxs</command>
    のパスを適切に変更しなければなりません。
    ディストリビューションによっては、<command>apxs</command> の名前が
    <command>apxs2</command> と変更されていることもあるので注意しましょう。
   </para>

   <informalexample>
    <screen>
<![CDATA[
cd ../php-NN
./configure --with-apxs2=/usr/local/apache2/bin/apxs --with-pdo-mysql
make
make install
]]>
    </screen>
   </informalexample>

   <para>
    configure オプションを変更して再インストールする場合は、
    <command>configure</command>, <command>make</command>,
    <command>make install</command> の手順を繰り返さなければなりません。
    共有モジュールとしてコンパイルされた PHP を有効にするには
    Apache を再起動するだけです。Apache の再コンパイルは不要です。
   </para>
         
   <para>
    特に断りがない限り、<command>make install</command> は、<link xlink:href="&url.php.pear;">PEAR</link>, <link linkend="install.pecl.phpize">phpize</link> のような様々な 
    関連ツール、CLI 版 PHP などもインストールすることに注意してください。
   </para>
  </listitem>

  <listitem>
   <para>
    <filename>php.ini</filename> ファイルを設定する
   </para>
    
   <informalexample>
    <screen>
<![CDATA[
cp php.ini-development /usr/local/lib/php.ini
]]>
    </screen>
   </informalexample>

   <para>
    PHP の実行時設定を変更するには、<literal>.ini</literal> ファイルを編集します。
    <filename>php.ini</filename> ファイルを他の場所に置きたい場合は、手順 5 で、
    オプション <literal>--with-config-file-path=/some/path</literal> を使用します。
   </para>
   
   <para>
    <filename>php.ini-development</filename>ent ではなく、<filename>php.ini-production</filename> を使用する場合は、PHP の
    動作が変化しますので、ファイル中に記載されている変更点の一覧を確認する
    ようにしてください。
   </para>
  </listitem>

  <listitem>
   <para>
    <filename>httpd.conf</filename> を編集し、PHP の共有モジュールをロードするよう設定します。
    <literal>LoadModule</literal> 命令の右側に記述するパスは、システムの PHP 共有モジュール
    を指している必要があります。上記の <command>make install</command> により既にこの設定は
    追加されている場合もありますが、確認が必要です。
   </para>

   <informalexample>
    <para>
     PHP 8 向けの設定は以下のようになります:
    </para>

    <programlisting role="apache-conf">
<![CDATA[
LoadModule php_module modules/libphp.so
]]>
    </programlisting>
   </informalexample>

   <informalexample>
    <para>
     PHP 7 向けの設定は以下のようになります:
    </para>

    <programlisting role="apache-conf">
<![CDATA[
LoadModule php7_module modules/libphp7.so
]]>
    </programlisting>
   </informalexample>
  </listitem>

  <listitem>
   <para>
    Apache が特定の拡張子のファイルを PHP としてパースするよう設定します。
    たとえば、Apache が拡張子 <literal>.php</literal> のファイルを PHP としてパースするようにします。
    単に Apache の <literal>AddType</literal> ディレクティブを使うだけではなく、
    悪意を持ってアップロード (あるいは作成) された <filename>exploit.php.jpg</filename>
    のようなファイルが PHP として実行されてしまわないようにしたいものです。
    この例では、PHP としてパースさせたい任意の拡張子を追加していくだけです。
    ためしに <literal>.php</literal> を追加してみましょう。
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch \.php$>
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    あるいは、拡張子 <literal>.php</literal>, <literal>.php2</literal>,
    <literal>.php3</literal>, <literal>.php4</literal>, <literal>.php5</literal>,
    <literal>.php6</literal>, <literal>.phtml</literal>
    のファイルだけを PHP として実行したい場合は、以下のようにします。
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.ph(p[2-6]?|tml)$">
    SetHandler application/x-httpd-php
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    拡張子 <literal>.phps</literal> のファイルを php ソースフィルタに処理させて
    構文ハイライトつきのソースコードとして表示させるには、このようにします。
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
<FilesMatch "\.phps$">
    SetHandler application/x-httpd-php-source
</FilesMatch>
]]>
    </programlisting>
   </informalexample>

   <para>
    <literal>mod_rewrite</literal> を使うと、<literal>.php</literal> ファイルに名前を変えたりコピーしたりしなくても
    任意の <literal>.phps</literal> ファイルを構文ハイライトつきのソースコードとして表示させることができます。
   </para>

   <informalexample>
    <programlisting role="apache-conf">
<![CDATA[
RewriteEngine On
RewriteRule (.*\.php)s$ $1 [H=application/x-httpd-php-source]
]]>
    </programlisting>
   </informalexample>

   <para>
    php ソースフィルタは、実運用環境では無効にしておかなければなりません。
    有効にしてしまうと、ソースコードに埋め込まれた機密情報や重要情報が漏れてしまう危険があります。
   </para>
  </listitem>

  <listitem>
   <para>
    Apache サーバーを、通常の手順通り、起動させます。
   </para>
  
   <informalexample>
    <screen>
<![CDATA[
/usr/local/apache2/bin/apachectl start
]]>
    </screen>
   </informalexample>

   <para>または、以下の手順でも起動できます。</para>

   <informalexample>
    <screen>
<![CDATA[
service httpd restart
]]>
    </screen>
   </informalexample>
  </listitem>
 </orderedlist>

 <para>
  上記の手順で、Apache2 ウェブサーバー上で
  <literal>SAPI</literal> モジュールとして PHP を動作させることができます。もちろん、Apache と PHP の双方とも、もっと多くの configure オプションを指定することが出来ます。
  詳しい情報を得るには、ソースツリーディレクトリで <command>./configure --help</command> を実行してください。
 </para>

 <para>
  マルチスレッド版の Apache をビルドするには、Apache のビルド時に標準の
  <filename>prefork</filename> MPM ではなく <filename>worker</filename> MPM を選択します。
  そのためには、先ほどの手順 3 のところで <command>./configure</command> の引数に次のオプションを追加します。
 </para>

 <informalexample>
  <screen>
<![CDATA[
--with-mpm=worker
]]>
  </screen>
 </informalexample>

 <para>
  そうすることで何がどのようになるのかをきちんと認識したうえで、これを行わなければなりません。
  詳細については Apacheドキュメントの
  <link xlink:href="&url.apache2.mpm;">マルチプロセッシングモジュール (MPM)</link>
  を参照ください。
 </para>

 <note>
  <para>
  <link linkend="faq.installation.apache.multiviews">Apache MultiViews FAQ</link> では、PHP でマルチビューを使う方法について解説しています。
  </para>
 </note>

 <note>
  <para>
   マルチスレッド版の Apache をビルドするには、ターゲットシステムがスレッドに対応していなければなりません。
   その場合は、PHP についても Zend Thread Safety (ZTS) でビルドしなければなりません。
   この構成では使用できない拡張モジュールもあります。推奨される方法は、Apache をデフォルトの
   <filename>prefork</filename> MPM モジュールでビルドすることです。
  </para>
 </note>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
