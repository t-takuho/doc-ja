<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 3e519f4d1cd5dc0af3bf894bb32416f682a507d5 Maintainer: mumumu Status: ready -->
<reference xml:id="class.stringable" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>Stringable インターフェイス</title>
 <titleabbrev>Stringable</titleabbrev>

 <partintro>

<!-- {{{ Stringable intro -->
  <section xml:id="stringable.intro">
   &reftitle.intro;
   <para>
    <interfacename>Stringable</interfacename>
    インターフェイスは、
    特定のクラスが <link linkend="object.tostring">__toString()</link>
    メソッドを実装していることを示します。
    ほとんどのインターフェイスと異なり、
    <interfacename>Stringable</interfacename>
    は、マジックメソッド
    <link linkend="object.tostring">__toString()</link>
    が定義されているあらゆるクラスで
    暗黙のうちに存在すると見なされますが、
    明示的に宣言することもできますし、宣言すべきです。
   </para>
   <para>
    このインターフェイスの一番の存在意義は、
    文字列プリミティブや、
    文字列にキャストできるオブジェクトを受け入れる
    union型 <literal>string|Stringable</literal>
    に対する型チェックを、関数ができるようにすることです。
   </para>
  </section>
<!-- }}} -->

  <section xml:id="stringable.synopsis">
   &reftitle.interfacesynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="interface">
    <oointerface>
     <interfacename>Stringable</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.stringable')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='Stringable'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <section xml:id="stringable.examples">
   <title>Stringable インターフェイスの例</title>
   <para>
    <example xml:id="stringable.basic-example">
     <title>基本的な Stringable インターフェイスの使い方</title>
     <programlisting role="php">
<![CDATA[
<?php
class IPv4Address implements Stringable {
    public function __construct(
        private string $oct1,
        private string $oct2,
        private string $oct3,
        private string $oct4,
    ) {}

    public function __toString(): string {
        return "$this->oct1.$this->oct2.$this->oct3.$this->oct4";
    }
}

function showStuff(string|Stringable $value) {
    // Stringable を渡した場合、以下は暗黙のうちに __toString() をコールします。
    print $value;
}

$ip = new IPv4Address('123', '234', '42', '9');

showStuff($ip);
?>
]]>
     </programlisting>
     &example.outputs.similar;
     <screen>
<![CDATA[
123.234.42.9
]]>
     </screen>
    </example>
   </para>
  </section>

 </partintro>

 &language.predefined.stringable.tostring;
</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
