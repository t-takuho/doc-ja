<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 7341710fa635b4a969bc855a1e4619cdfa6b63f1 Maintainer: takagi Status: ready -->
<!-- CREDITS: mumumu -->

 <sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
  <title>トレイト</title>
  <para>
   PHP は、コードを再利用するための「トレイト」という仕組みを実装しています。
  </para>
  <para>
   トレイトは、PHP のような単一継承言語でコードを再利用するための仕組みのひとつです。
   トレイトは、単一継承の制約を減らすために作られたもので、
   いくつかのメソッド群を異なるクラス階層にある独立したクラスで再利用できるようにします。
   トレイトとクラスを組み合わせた構文は複雑さを軽減させてくれ、
   多重継承や Mixin に関連するありがちな問題を回避することもできます。
  </para>
  <para>
   トレイトはクラスと似ていますが、トレイトは単にいくつかの機能をまとめるためだけのものです。
   トレイト自身のインスタンスを作成することはできません。
   昔ながらの継承に機能を加えて、振る舞いを水平方向で構成できるようになります。
   つまり、継承しなくてもクラスのメンバーに追加できるようになります。
  </para>
  <example xml:id="language.oop5.traits.basicexample">
    <title>トレイトの例</title>
    <programlisting role="php">
<![CDATA[
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>
]]>
    </programlisting>
   </example>
  
  <sect2 xml:id="language.oop5.traits.precedence">
   <title>優先順位</title>
   <para>
    基底クラスから継承したメンバーよりも、トレイトで追加したメンバーのほうが優先されます。
    優先順位は現在のクラスのメンバーが最高で、その次がトレイトのメソッド、
    そしてその次にくるのが継承したメソッドとなります。
   </para>
   <example xml:id="language.oop5.traits.precedence.examples.ex1">
    <title>優先順位の例</title>
    <para>
     基底クラスから継承したメソッドは、MyHelloWorld に SayWorld トレイトから追加されたメソッドで上書きされます。
     この挙動は、MyHelloWorld クラスで定義したメソッドでも同じです。
     優先順位は現在のクラスのメンバーが最高で、その次がトレイトのメソッド、
     そしてその次にくるのが継承したメソッドとなります。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait SayWorld {
    public function sayHello() {
        parent::sayHello();
        echo 'World!';
    }
}

class MyHelloWorld extends Base {
    use SayWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.precedence.examples.ex2">
    <title>もうひとつの優先順位の例</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

class TheWorldIsNotEnough {
    use HelloWorld;
    public function sayHello() {
        echo 'Hello Universe!';
    }
}

$o = new TheWorldIsNotEnough();
$o->sayHello();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello Universe!
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.multiple">
   <title>複数のトレイト</title>
   <para>
    複数のトレイトをひとつのクラスに追加するには、<literal>use</literal> 文でカンマ区切りで指定します。
   </para>
   <example xml:id="language.oop5.traits.multiple.ex1">
    <title>複数のトレイトの使用例</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World';
    }
}

class MyHelloWorld {
    use Hello, World;
    public function sayExclamationMark() {
        echo '!';
    }
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
$o->sayExclamationMark();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.conflict">
   <title>衝突の解決</title>
   <para>
    同じ名前のメンバーを含む複数のトレイトを追加するときには、
    衝突を明示的に解決しておかないと fatal エラーが発生します。
   </para>
   <para>
    同一クラス内での複数のトレイト間の名前の衝突を解決するには、
    <literal>insteadof</literal> 演算子を使って
    そのうちのひとつを選ばなければなりません。
   </para>
   <para>
    この方法はひとつのメソッドだけしか使えませんが、
    <literal>as</literal> 演算子を使うと、
    メソッドのいずれかにエイリアスを追加できます。
    <literal>as</literal> 演算子はメソッドをリネームするわけではないので、
    その他のメソッドにも何も影響を及ぼさないことに注意しましょう。
   </para>
   <example xml:id="language.oop5.traits.conflict.ex1">
    <title>衝突の解決</title>
    <para>
      この例では、Talker がトレイト A と B を使います。
      A と B には同じ名前のメソッドがあるので、
      smallTalk はトレイト B を使って
      bigTalk はトレイト A を使うように定義します。
    </para>
    <para>
      Aliased_Talker は、<literal>as</literal>
      演算子を使って B の bigTalk の実装に
      <literal>talk</literal> というエイリアスを指定して使います。
    </para> 
    <programlisting role="php">
<![CDATA[
<?php
trait A {
    public function smallTalk() {
        echo 'a';
    }
    public function bigTalk() {
        echo 'A';
    }
}

trait B {
    public function smallTalk() {
        echo 'b';
    }
    public function bigTalk() {
        echo 'B';
    }
}

class Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
    }
}

class Aliased_Talker {
    use A, B {
        B::smallTalk insteadof A;
        A::bigTalk insteadof B;
        B::bigTalk as talk;
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.visibility">
   <title>メソッドのアクセス権の変更</title>
   <para>
    <literal>as</literal> 構文を使うと、
    クラス内でのメソッドのアクセス権も変更することができます。
   </para>
   <example xml:id="language.oop5.traits.visibility.ex1">
    <title>メソッドのアクセス権を変更する</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HelloWorld {
    public function sayHello() {
        echo 'Hello World!';
    }
}

// sayHello のアクセス権を変更します
class MyClass1 {
    use HelloWorld { sayHello as protected; }
}

// アクセス権を変更したエイリアスメソッドを作ります
// sayHello 自体のアクセス権は変わりません
class MyClass2 {
    use HelloWorld { sayHello as private myPrivateHello; }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.composition">
   <title>トレイトを組み合わせたトレイト</title>
   <para>
    クラスからトレイトを使えるのと同様に、トレイトからもトレイトを使えます。
    トレイトの定義の中でトレイトを使うと、
    定義したトレイトのメンバーの全体あるいは一部を組み合わせることができます。
   </para>
   <example xml:id="language.oop5.traits.composition.ex1">
    <title>トレイトを組み合わせたトレイト</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHello() {
        echo 'Hello ';
    }
}

trait World {
    public function sayWorld() {
        echo 'World!';
    }
}

trait HelloWorld {
    use Hello, World;
}

class MyHelloWorld {
    use HelloWorld;
}

$o = new MyHelloWorld();
$o->sayHello();
$o->sayWorld();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hello World!
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.abstract">
   <title>トレイトのメンバーの抽象化</title>
   <para>
    トレイトでは、抽象メソッドを使ってクラスの要件を指定できます。
    アクセス権は public, protected, private をサポートしています。
    PHP 8.0.0 より前のバージョンでは、
    public と protected な抽象メソッドだけがサポートされていました。
   </para>
   <caution>
    <simpara>
     PHP 8.0.0 以降では、具象メソッドは
     <link linkend="language.oop.lsp">シグネチャの互換性に関するルール</link>
     を満たさなければなりません。
     これより前のバージョンでは、シグネチャは異なっていても構いませんでした。
    </simpara>
   </caution>
   <example xml:id="language.oop5.traits.abstract.ex1">
    <title>抽象メソッドによる、要件の明示</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hello {
    public function sayHelloWorld() {
        echo 'Hello'.$this->getWorld();
    }
    abstract public function getWorld();
}

class MyHelloWorld {
    private $world;
    use Hello;
    public function getWorld() {
        return $this->world;
    }
    public function setWorld($val) {
        $this->world = $val;
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.static">
   <title>トレイトの static メンバー</title>
   <para>
    トレイトでは、static 変数、static メソッド、static プロパティを定義できます。
   </para>
   <note>
    <para>
     PHP 8.1.0 以降では、トレイトにある static メソッドや、
     static プロパティに直接アクセスすることは、
     推奨されなくなりました。
     これらは、トレイトを使っているクラスからのみアクセスすべきものです。
    </para>
   </note>
   <example xml:id="language.oop5.traits.static.ex1">
    <title>static変数</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Counter {
    public function inc() {
        static $c = 0;
        $c = $c + 1;
        echo "$c\n";
    }
}

class C1 {
    use Counter;
}

class C2 {
    use Counter;
}

$o = new C1(); $o->inc(); // 1 と表示
$p = new C2(); $p->inc(); // 1 と表示
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.static.ex2">
    <title>staticメソッド</title>
    <programlisting role="php">
<![CDATA[
<?php
trait StaticExample {
    public static function doSomething() {
        return 'Doing something';
    }
}

class Example {
    use StaticExample;
}

Example::doSomething();
?>

]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.static.ex3">
    <title>staticプロパティ</title>
    <programlisting role="php">
     <![CDATA[
<?php
trait StaticExample {
    public static $static = 'foo';
}
class Example {
    use StaticExample;
}
echo Example::$static;
?>
]]>
    </programlisting>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.properties">
   <title>プロパティ</title>
   <para>
    トレイトにはプロパティも定義できます。
   </para>
   <example xml:id="language.oop5.traits.properties.example">
    <title>プロパティの定義</title>
    <programlisting role="php">
<![CDATA[
<?php
trait PropertiesTrait {
    public $x = 1;
}

class PropertiesExample {
    use PropertiesTrait;
}

$example = new PropertiesExample;
$example->x;
?>
]]>
    </programlisting>
   </example>
   <para>
    トレイトでプロパティを定義したときは、
    クラスではそれと互換性 (公開範囲と型とreadonlyの有無、そして初期値が同じ) がない同じ名前のプロパティを定義できません。
    互換性がない名前を定義すると、致命的なエラーが発生します。
   </para>
   <example xml:id="language.oop5.traits.properties.conflicts">
    <title>衝突の解決</title>
    <programlisting role="php">
<![CDATA[
<?php
trait PropertiesTrait {
    public $same = true;
    public $different1 = false;
    public bool $different2;
    public bool $different3;
}

class PropertiesExample {
    use PropertiesTrait;
    public $same = true;
    public $different1 = true; // Fatal error
    public string $different2; // Fatal error
    readonly protected bool $different3; // Fatal error
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

 <sect2 xml:id="language.oop5.traits.constants">
  <title>&Constants;</title>
  <para>
   PHP 8.2.0 以降では、トレイトでも定数を定義できます。
  </para>
  <example xml:id="language.oop5.traits.constants.example">
   <title>定数を定義する</title>
   <programlisting role="php">
<![CDATA[
<?php
trait ConstantsTrait {
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample {
    use ConstantsTrait;
}

$example = new ConstantsExample;
echo $example::FLAG_MUTABLE; // 1
?>
]]>
   </programlisting>
  </example>
  <para>
   トレイトで定数を定義したときは、
   クラスではそれと互換性 (公開範囲と初期値、そして final の有無が同じ) がない同じ名前の定数を定義できません。
   互換性がない名前を定義すると、致命的なエラーが発生します。
  </para>
  <example xml:id="language.oop5.traits.constants.conflicts">
   <title>衝突の解決</title>
   <programlisting role="php">
<![CDATA[
<?php
trait ConstantsTrait {
    public const FLAG_MUTABLE = 1;
    final public const FLAG_IMMUTABLE = 5;
}

class ConstantsExample {
    use ConstantsTrait;
    public const FLAG_IMMUTABLE = 5; // Fatal error
}
?>
]]>
   </programlisting>
  </example>
 </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
