<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<refentry xml:id="function.pcntl-waitpid" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_waitpid</refname>
  <refpurpose>待つかフォークした子プロセスのステータスを返す</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_waitpid</methodname>
   <methodparam><type>int</type><parameter>process_id</parameter></methodparam>
   <methodparam><type>int</type><parameter role="reference">status</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>flags</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter role="reference">resource_usage</parameter><initializer>[]</initializer></methodparam>
  </methodsynopsis>
  <para>
   引数 <parameter>process_id</parameter> で指定した子プロセスが終了する・
   現在のプロセスを終了させるシグナルが送信される・シグナル処理関数を
   コールするシグナルが送信される
   のいずれかが発生するまで、現在のプロセスの実行を中断します。
  </para>
  <para>
   <parameter>process_id</parameter> でリクエストされた子プロセスが、
   コール時に既に終了している場合("ゾンビ"プロセスと呼ばれます)、
   この関数は直ちに処理を返します。
   子プロセスにより使用される全てのシステム
   リソースは、解放されます。waitpid のシステムでの動作に関する詳細は、
   システムの waitpid(2) についての man ページを参照ください。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>process_id</parameter></term>
     <listitem>
      <para>
       <parameter>process_id</parameter> の値は、次のどれかとなります。
       <table>
        <title><parameter>process_id</parameter> のとりうる値</title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><literal>&lt; -1</literal></entry>
           <entry>
            プロセスグループ ID が <parameter>process_id</parameter> の絶対値に等しい
            子プロセスを待ちます。
           </entry>
          </row>
          <row>
           <entry><literal>-1</literal></entry>
           <entry>
            全ての子プロセスを待ちます。これは、wait 関数の動作と同じです。
           </entry>
          </row>
          <row>
           <entry><literal>0</literal></entry>
           <entry>
            プロセスグループ ID がコール側のプロセスと等しい子プロセスを
            待ちます。
           </entry>
          </row>
          <row>
           <entry><literal>&gt; 0</literal></entry>
           <entry>
            プロセス ID が <parameter>process_id</parameter> の値に等しい
            子プロセスを待ちます。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
      <note>
       <para>
        <literal>-1</literal> を
        <parameter>process_id</parameter> に指定した際の動きは、
        <function>pcntl_wait</function> の機能と
        (<parameter>flags</parameter> を除いて) 同じです。
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>status</parameter></term>
     <listitem>
      <para>
       <function>pcntl_waitpid</function> は、パラメータ
       <parameter>status</parameter> の中にステータス情報を保存します。
       このステータスは、次の関数を用いて評価可能です。
       <function>pcntl_wifexited</function>、
       <function>pcntl_wifstopped</function>、
       <function>pcntl_wifsignaled</function>、
       <function>pcntl_wexitstatus</function>、
       <function>pcntl_wtermsig</function> および
       <function>pcntl_wstopsig</function> 。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> の値は、次の 2 つのグローバル定数の
       ゼロまたはそれ以上の論理和です。
       <table>
        <title><parameter>flags</parameter> のとりうる値</title>
        <tgroup cols="2">
         <tbody>
          <row>
           <entry><constant>WNOHANG</constant></entry>
           <entry>
            子プロセスが終了していない場合に直ちに処理を返します。
           </entry>
          </row>
          <row>
           <entry><constant>WUNTRACED</constant></entry>
           <entry>
            停止した子プロセスの場合に処理を返します。そして、ステータス
            は報告されません。
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>pcntl_waitpid</function> は、終了した子プロセスの
   プロセス ID を返します。エラーの場合は -1、<constant>WNOHANG</constant> が使用され、
   子プロセスが利用できない場合に 0 を返します。
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>pcntl_wifexited</function></member>
    <member><function>pcntl_wifstopped</function></member>
    <member><function>pcntl_wifsignaled</function></member>
    <member><function>pcntl_wexitstatus</function></member>
    <member><function>pcntl_wtermsig</function></member>
    <member><function>pcntl_wstopsig</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
