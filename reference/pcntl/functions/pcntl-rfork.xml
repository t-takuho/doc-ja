<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: mumumu Status: ready -->
<refentry xml:id="function.pcntl-rfork" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pcntl_rfork</refname>
  <refpurpose>プロセスのリソースを管理する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>pcntl_rfork</methodname>
   <methodparam><type>int</type><parameter>flags</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>signal</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>
  <para>
   プロセスのリソースを管理します。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> は、
       呼び出しているプロセス(親) のリソースを新しいプロセス(子)と共有するか、
       デフォルト値で初期化するかを指定します。
      </para>
      <para>
       <parameter>flags</parameter> は、
       以下のうちのいくつかを論理ORで指定します:
       <simplelist>
        <member>
         <constant>RFPROC</constant>:
         設定すると、新しいプロセスが作られます。
         設定しない場合、変更は現在のプロセスに適用されます。
        </member>
        <member>
         <constant>RFNOWAIT</constant>:
         設定すると、子プロセスは親プロセスから切り離されます。
         子プロセスが終了するときには、
         親プロセスが収集するステータスが残りません。
        </member>
        <member>
         <constant>RFFDG</constant>:
         設定すると、
         呼び出し側のファイルディスクリプタテーブルがコピーされます。
         設定しない場合、
         ふたつのプロセスが単一のテーブルを共有します。
        </member>
        <member>
         <constant>RFCFDG</constant>:
         設定すると、新しいファイルディスクリプタテーブルを使って
         新しいプロセスが開始されます。
         <constant>RFFDG</constant> とは同時に指定できません。
        </member>
        <member>
         <constant>RFLINUXTHPN</constant>:
         設定すると、
         子のスレッドが終了時に kernel は SIGCHILD ではなく、
         SIGUSR1 を返します。
         これは、Linux のcloneが終了時に、
         親に状態を知らせる動作を模倣する意図があります。
        </member>
       </simplelist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>signal</parameter></term>
     <listitem>
      <para>
       シグナル番号
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   成功時には、親スレッドの実行時に子プロセスのPIDを返し、
   子のスレッド実行時に <literal>0</literal> を返します。
   失敗時には、親のコンテキストには <literal>-1</literal> を返し、
   子プロセスは作られません。そして、PHP のエラーが発生します。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>pcntl_rfork</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php

$pid = pcntl_rfork(RFNOWAIT|RFTSIGZMB, SIGUSR1);
if ($pid > 0) {
  // This is the parent process.
  var_dump($pid);
} else {
  // This is the child process.
  var_dump($pid);
  sleep(2); // as the child does not wait, so we see its "pid"
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
int(77093)
int(0)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    この関数は、BSDシステムでのみ利用可能です。
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>pcntl_fork</function></member>
    <member><function>pcntl_waitpid</function></member>
    <member><function>pcntl_signal</function></member>
    <member><function>cli_set_process_title</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
