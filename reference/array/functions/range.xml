<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 647d5c50e3b6c103a3efdb578fd227f8b923399d Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,shimooka -->
<refentry xml:id="function.range" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>range</refname>
  <refpurpose>ある範囲の要素を含む配列を作成する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>range</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type><type>float</type></type><parameter>start</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>int</type><type>float</type></type><parameter>end</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>int</type><type>float</type></type><parameter>step</parameter><initializer>1</initializer></methodparam>
  </methodsynopsis>
  <para>
   ある範囲の要素を含む配列を作成します。
  </para>
  <para>
   <parameter>start</parameter> と <parameter>end</parameter>
   が両方文字列で、かつ <parameter>step</parameter> が整数の場合、
   生成される配列はバイト列のシーケンスになります。
   そうでない場合、生成される配列は数値のシーケンスになります。
  </para>
  <para>
   <parameter>start</parameter> が <parameter>end</parameter>
   よりも小さい場合、シーケンスは増加します。
   そうでない場合、シーケンスは減少します。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>start</parameter></term>
     <listitem>
      <para>
       シーケンスの最初の値。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>end</parameter></term>
     <listitem>
      <para>
       シーケンスの最後としてあり得る値。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>step</parameter></term>
     <listitem>
      <para>
       <parameter>step</parameter> は、生成されるシーケンスの個別の値が
       どれくらい離れているかを指定します。
      </para>
      <para>
       シーケンスが減少する場合、<parameter>step</parameter>
       は負の値を指定しても構いません。
      </para>
      <para>
       <parameter>step</parameter> が 端数のない <type>float</type> 
       の場合、整数として解釈されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   要素のシーケンスを配列として返します。
   最初の要素は <parameter>start</parameter> になり、
   <parameter>end</parameter> になるまで続きます。
   シーケンスのそれぞれの値は、<parameter>step</parameter> だけ離れています。
  </para>
  <para>
   返される配列の最後の要素は、
   <parameter>end</parameter> または シーケンスの直前の要素になります。
   どちらになるかは、<parameter>step</parameter> の値によります。
  </para>
  <para>
   <parameter>start</parameter> と <parameter>end</parameter>
   が両方文字列で、かつ <parameter>step</parameter> が整数の場合、
   生成される配列は、バイト列のシーケンスになります。
   一般的にはラテン文字の <abbrev>ASCII</abbrev> 文字からなるシーケンスです。
  </para>
  <para>
   <parameter>start</parameter>, <parameter>end</parameter>, <parameter>step</parameter> のうち少なくともひとつが <type>float</type> の場合、
   生成される配列は <type>float</type> のシーケンスになります。
  </para>
  <para>
   その他の場合、生成される配列は整数のシーケンスになります。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <itemizedlist>
   <listitem>
    <simpara>
     <parameter>step</parameter> が <literal>0</literal> の場合、<classname>ValueError</classname> がスローされます。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>start</parameter>, <parameter>end</parameter>, <parameter>step</parameter> が有限の値(<function>is_finite</function>) でない場合、
     <classname>ValueError</classname> がスローされます。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>step</parameter> が負の値なのに、生成される範囲が増えている(つまり、 <code>$start &lt;= $end</code>) 場合、
     <classname>ValueError</classname> がスローされます。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>start</parameter> または <parameter>end</parameter> が空文字列 <literal>''</literal> の場合、<constant>E_WARNING</constant> が発生し、空文字列は <literal>0</literal> として解釈されます。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>start</parameter> または <parameter>end</parameter> が
     <link linkend="language.types.numeric-strings">数値形式の文字列</link>
     でない、長さが1バイトより大きい値の場合、<constant>E_WARNING</constant> が発生します。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>start</parameter> または <parameter>end</parameter> が
     暗黙のうちに整数にキャストされた文字列の場合、
     <constant>E_WARNING</constant> が発生します。なぜなら、他の境界の入力値は数値だからです。
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <parameter>step</parameter> が <type>float</type> の場合、
     かつ <parameter>start</parameter> と <parameter>end</parameter> が
     <link linkend="language.types.numeric-strings">数値形式の文字列</link>
     でない場合、<constant>E_WARNING</constant> が発生します。
    </simpara>
   </listitem>
  </itemizedlist>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>start</parameter> と <parameter>end</parameter>
       が両方文字列の場合、<function>range</function> は常にバイト列を要素とした配列を生成するようになりました。
       これより前のバージョンでは、境界の値のうちのひとつが数値形式の文字列の場合に、もう一方の境界の値を整数にキャストしていました。
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>start</parameter> または <parameter>end</parameter> が
       暗黙のうちに整数にキャストされた文字列の場合、
       <constant>E_WARNING</constant> が発生するようになりました。
       なぜなら、他の境界の入力値が数値だからです。
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>start</parameter> または <parameter>end</parameter>
       が数値形式の文字列でなく、かつ長さが1バイトより大きい値の場合、
       <constant>E_WARNING</constant> が発生するようになりました。
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>start</parameter> または <parameter>end</parameter> が空文字列の場合、<constant>E_WARNING</constant> が発生するようになりました。
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>step</parameter> が 端数のない <type>float</type> 
       の場合、整数として解釈されるようになりました。
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>step</parameter> が負の値なのに、生成される範囲が増えている場合、
       <classname>ValueError</classname> がスローされるようになりました。
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>step</parameter> が有限の値でない場合、
       <classname>ValueError</classname> がスローされるようになりました。
      </entry>
     </row>
     <row>
      <entry>8.3.0</entry>
      <entry>
       <parameter>start</parameter> または <parameter>end</parameter>
       が配列、<type>object</type>、<type>resource</type> の場合、
       <classname>TypeError</classname> がスローされるようになりました。
       これより前のバージョンでは、これらの値は暗黙のうちに整数にキャストされていました。
      </entry>
     </row>
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>range</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
echo implode(', ', range(0, 12)), PHP_EOL;

echo implode(', ', range(0, 100, 10)), PHP_EOL;

echo implode(', ', range('a', 'i')), PHP_EOL;

echo implode(', ', range('c', 'a')), PHP_EOL;

echo implode(', ', range('A', 'z')), PHP_EOL;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12
0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100
a, b, c, d, e, f, g, h, i
c, b, a
A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z, [, \, ], ^, _, `, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>shuffle</function></member>
    <member><function>array_fill</function></member>
    <member>&foreach;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
