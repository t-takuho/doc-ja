<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 61374bbe228e8e9c55a24aba59a1e2bb2a871148 Maintainer: takagi Status: ready -->
<refentry xml:id="function.db2-bind-param" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>db2_bind_param</refname>
  <refpurpose>
   PHP 変数を SQL 文のパラメータにバインドする
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>db2_bind_param</methodname>
   <methodparam><type>resource</type><parameter>stmt</parameter></methodparam>
   <methodparam><type>int</type><parameter>parameter_number</parameter></methodparam>
   <methodparam><type>string</type><parameter>variable_name</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>parameter_type</parameter><initializer><constant>DB2_PARAM_IN</constant></initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>data_type</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>precision</parameter><initializer>-1</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>scale</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   <function>db2_prepare</function> が返したステートメントリソース内の
   SQL 文のパラメータに PHP 変数をバインドします。
   <function>db2_execute</function> へのオプション配列の一部として
   変数を渡すのに比べ、この関数を使用すると
   パラメータの型、データの型、精度、位取りなどの詳細を制御できるようになります。
  </para>

 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>stmt</parameter></term>
     <listitem>
      <para>
       <function>db2_prepare</function> が返すプリペアドステートメント。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_number</parameter></term>
     <listitem>
      <para>
       プリペアドステートメントのパラメータの位置。
       1 から始まります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
    <term><parameter>variable_name</parameter></term>
     <listitem>
      <para>
       <parameter>parameter_number</parameter> で指定したパラメータに
       バインドする PHP 変数の名前を表す文字列。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>parameter_type</parameter></term>
     <listitem>
      <para>
       PHP 変数を SQL パラメータにバインドする際に
       入力パラメータとするのか (<constant>DB2_PARAM_IN</constant>)
       出力パラメータとするのか (<constant>DB2_PARAM_OUT</constant>)
       あるいは入出力両方を許可するのか
       (<constant>DB2_PARAM_INOUT</constant>) を指定する定数。
       メモリのオーバーヘッドを避けるため、<constant>DB2_PARAM_FILE</constant>
       を指定して PHP 変数をファイルにバインドし、
       ファイルからラージオブジェクト (BLOB、CLOB あるいは DBCLOB)
       データを読み込むようにするすることも可能です。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>data_type</parameter></term>
     <listitem>
      <para>
       PHP 変数をどの SQL データ型にバインドするのかを指定する定数。
       <constant>DB2_BINARY</constant>、
       <constant>DB2_CHAR</constant>、<constant>DB2_DOUBLE</constant> あるいは
       <constant>DB2_LONG</constant> のうちのいずれか。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>precision</parameter></term>
     <listitem>
      <para>
       変数をデータベースにバインドする際の精度を指定します。
       このパラメータは、ストアドプロシージャから
       XML 出力の値を取得する際にも使用します。
       非負の値を指定すると、それがデータベースから取得する
       XML データの最大サイズとなります。
       このパラメータを使用しない場合は、
       ストアドプロシージャから XML 出力を取得する際の最大サイズを
       デフォルトの 1MB とみなします。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>scale</parameter></term>
     <listitem>
      <para>
       変数をデータベースにバインドする際の位取りを指定します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>PHP 変数をプリペアドステートメントにバインドする</title>
    <para>
     以下の例の SQL 文では、WHERE 句の中で 2 つの入力パラメータを使用しています。
     この 2 つのパラメータに PHP 変数をバインドするために
     <function>db2_bind_param</function> をコールします。
     <function>db2_bind_param</function> をコールする前に
     PHP 変数を宣言したり代入したりする必要がないことに注意しましょう。
     この例では、<literal>$lower_limit</literal> については
     <function>db2_bind_param</function> がコールされる前に
     値が代入されていますが、<literal>$upper_limit</literal> については
     <function>db2_bind_param</function> をコールした後で代入されています。
     <function>db2_execute</function> をコールする前には、
     必ず変数をバインドしなければなりません。また、入力パラメータについては
     何らかの値を代入しておく必要があります。
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'SELECT name, breed, weight FROM animals
    WHERE weight > ? AND weight < ?';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

// db2_bind_param() のコール前に変数を宣言できます
$lower_limit = 1;

db2_bind_param($stmt, 1, "lower_limit", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "upper_limit", DB2_PARAM_IN);

// また、db2_bind_param() をコールした後で変数を宣言することも可能です
$upper_limit = 15.0;

if (db2_execute($stmt)) {
    while ($row = db2_fetch_array($stmt)) {
        print "{$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Pook, cat, 3.2
Rickety Ride, goat, 9.7
Peaches, dog, 12.3
]]>
    </screen>
   </example>
   <example>
    <title>IN および OUT パラメータを使用したストアドプロシージャのコール</title>
    <para>
     以下の例のストアドプロシージャ match_animal は、
     3 つのさまざまなパラメータを受け取ります。
     <orderedlist>
      <listitem>
       <para>
        最初の動物の名前を入力として受け取る
        入力 (IN) パラメータ。
       </para>
      </listitem>
      <listitem>
       <para>
        2 番目の動物の名前を入力として受け取り、その名前に一致する動物が
        データベースに存在する場合に文字列 <literal>TRUE</literal>
        を返す、入出力 (INOUT) パラメータ。
       </para>
      </listitem>
      <listitem>
       <para>
        指定した 2 匹の動物の合計体重を返す、出力 (OUT) パラメータ。
       </para>
      </listitem>
     </orderedlist>
     さらにこのストアドプロシージャは結果セットを返します。その内容は、
     最初のパラメータで指定した動物から 2 番目のパラメータで指定した動物までの
     動物の一覧をアルファベット順に並べたものとなります。
    </para>
    <programlisting role="php">
<![CDATA[
<?php

$sql = 'CALL match_animal(?, ?, ?)';
$conn = db2_connect($database, $user, $password);
$stmt = db2_prepare($conn, $sql);

$name = "Peaches";
$second_name = "Rickety Ride";
$weight = 0;

db2_bind_param($stmt, 1, "name", DB2_PARAM_IN);
db2_bind_param($stmt, 2, "second_name", DB2_PARAM_INOUT);
db2_bind_param($stmt, 3, "weight", DB2_PARAM_OUT);

print "コール前のバインド変数の値:\n";
print "  1: {$name} 2: {$second_name} 3: {$weight}\n\n";

if (db2_execute($stmt)) {
    print "コール後のバインド変数の値:\n";
    print "  1: {$name} 2: {$second_name} 3: {$weight}\n\n";

    print "結果:\n";
    while ($row = db2_fetch_array($stmt)) {
        print "  {$row[0]}, {$row[1]}, {$row[2]}\n";
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
コール前のバインド変数の値:
  1: Peaches 2: Rickety Ride 3: 0

コール後のバインド変数の値:
  1: Peaches 2: TRUE 3: 22

結果:
  Peaches, dog, 12.3
  Pook, cat, 3.2
  Rickety Ride, goat, 9.7
]]>
    </screen>
   </example>
   <example>
    <title>バイナリラージオブジェクト (BLOB) をファイルから直接挿入する</title>
    <para>
     ラージオブジェクトのデータは、通常は XML ドキュメントあるいは
     音声ファイルのようなファイルに保存されています。
     いったんファイルの内容を PHP 変数に読み込んだうえで SQL
     文にバインドする代わりに、ファイルを直接 sql 文の入力パラメータに
     バインドすることでメモリのオーバーヘッドを避けることができます。
     以下の例で、BLOB カラムにファイルを直接バインドする方法を説明します。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$stmt = db2_prepare($conn, "INSERT INTO animal_pictures(picture) VALUES (?)");

$picture = "/opt/albums/spook/grooming.jpg";
$rc = db2_bind_param($stmt, 1, "picture", DB2_PARAM_FILE);
$rc = db2_execute($stmt);
?>
]]>
    </programlisting>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>db2_execute</function></member>
    <member><function>db2_prepare</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
