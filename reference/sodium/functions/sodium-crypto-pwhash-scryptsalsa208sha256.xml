<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d76a7fe17dd2488e47d664a8ab38e161b13ac843 Maintainer: mumumu Status: ready -->
<refentry xml:id="function.sodium-crypto-pwhash-scryptsalsa208sha256" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sodium_crypto_pwhash_scryptsalsa208sha256</refname>
  <refpurpose>scrypt を使い、パスワードからキーを導出する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sodium_crypto_pwhash_scryptsalsa208sha256</methodname>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>opslimit</parameter></methodparam>
   <methodparam><type>int</type><parameter>memlimit</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sodium_crypto_pwhash</function>
   の scrypt 対応版です。
  </para>
  <para>
   この特別な関数を使う理由は、
   パスワードとソルトから、暗号化キーのシードを導出し、
   そのシードを特定の目的に必要とされる実際のキー
   (たとえば
    <function>sodium_crypto_sign_detached</function> で使う)
   を生成することです。
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>length</parameter></term>
    <listitem>
     <para>
      生成するパスワードハッシュの長さ。
      バイト単位で指定します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      ハッシュを生成するパスワード
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>salt</parameter></term>
    <listitem>
     <para>
      ハッシュ化する前に、
      パスワードに追加するソルト値。
      この値は予測されてはいけません。
      <function>random_bytes</function>
      のような良質な乱数のソースから生成されることが理想です。
      そして、少なくとも長さが
      <constant>SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_SALTBYTES</constant>
      バイトである必要があります。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>opslimit</parameter></term>
    <listitem>
     <para>
      実際に行う計算処理の最大量。
      この値を大きくすると、
      キーを計算するのに必要なCPUサイクルが増加します。
      意図した使い方次第で、
      適切な値の上限値を設定するために、いくつかの定数が存在します。
      弱いものから強いものへと並べると、以下のとおりです:
      <constant>SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_INTERACTIVE</constant> と <constant>SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_OPSLIMIT_SENSITIVE</constant> です。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>memlimit</parameter></term>
    <listitem>
     <para>
      この関数が使用するメモリの最大値をバイト単位で指定します。
      適切な値を選ぶために、ヘルパとなる定数が存在します。
      サイズの順に、以下の通りです:
      <constant>SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_INTERACTIVE</constant> と <constant>SODIUM_CRYPTO_PWHASH_SCRYPTSALSA208SHA256_MEMLIMIT_SENSITIVE</constant> があります。
      これらの値は、<parameter>opslimit</parameter> 
      と一致するものとペアになるべきです。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   指定された長さのバイト列を文字列として返します。
  </para>
 </refsect1>


</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
