<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d76a7fe17dd2488e47d664a8ab38e161b13ac843 Maintainer: mumumu Status: ready -->

<refentry xml:id="function.sodium-crypto-pwhash" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>sodium_crypto_pwhash</refname>
  <refpurpose>Argon2 アルゴリズムを使い、パスワードからキーを導出する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sodium_crypto_pwhash</methodname>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam><modifier role="attribute">#[\SensitiveParameter]</modifier><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>opslimit</parameter></methodparam>
   <methodparam><type>int</type><parameter>memlimit</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>algo</parameter><initializer><constant>SODIUM_CRYPTO_PWHASH_ALG_DEFAULT</constant></initializer></methodparam>
  </methodsynopsis>
  <para>
   この関数は、
   libsodium の crypto_pwhash 派生関数への低レベルのアクセスを提供します。
   この関数を使う明確な理由がなければ、
   <function>sodium_crypto_pwhash_str</function>
   や
   <function>password_hash</function> 関数を代わりに使うべきです。
  </para>
  <para>
   この関数を使う共通の理由は、
   パスワードとソルトから暗号化キーのためのシードを導出し、
   その値を使うことで、特定の目的
   (たとえば、<function>sodium_crypto_sign_detached</function>)
   で使う実際の鍵を生成することです。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>length</parameter></term>
    <listitem>
     <para>
      生成するパスワードハッシュの長さ。
      バイト単位で指定します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>password</parameter></term>
    <listitem>
     <para>
      ハッシュを生成するパスワードを文字列で指定します。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>salt</parameter></term>
    <listitem>
     <para>
      ハッシュ化する前に、
      パスワードに追加するソルト値。
      この値は予測されてはいけません。
      <function>random_bytes</function>
      のような良質な乱数のソースから生成されることが理想です。
      そして、長さが正確に
      <constant>SODIUM_CRYPTO_PWHASH_SALTBYTES</constant> 
      バイトである必要があります。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>opslimit</parameter></term>
    <listitem>
     <para>
      実際に行う計算処理の最大量。
      この値を大きくすると、
      キーを計算するのに必要なCPUサイクルが増加します。
      意図した使い方次第で、
      適切な値の上限値を設定するために、いくつかの定数が存在します。
      弱いものから強いものへと並べると、以下のとおりです:
      <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE</constant>,
      <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_MODERATE</constant>,
      <constant>SODIUM_CRYPTO_PWHASH_OPSLIMIT_SENSITIVE</constant>
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>memlimit</parameter></term>
    <listitem>
     <para>
      この関数が使用するメモリの最大値をバイト単位で指定します。
      適切な値を選ぶために、ヘルパとなる定数が存在します。
      サイズの順に、以下の通りです:
      <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE</constant>,
      <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_MODERATE</constant>,
      <constant>SODIUM_CRYPTO_PWHASH_MEMLIMIT_SENSITIVE</constant>
      これらの値は、<parameter>opslimit</parameter> 
      と一致するものとペアになるべきです。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>algo</parameter></term>
    <listitem>
     <para>
      使用するハッシュアルゴリズムのIDを指定します。
      デフォルトは、
      <constant>SODIUM_CRYPTO_PWHASH_ALG_DEFAULT</constant>
      (現状推奨されるアルゴリズム。
      これは、libsodium のバージョンによって変更されるかもしれません)
      です。
      または、
      Argon2id アルゴリズム version 1.3 を表す
      <constant>SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13</constant>
      を明示的に使うこともできます。
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   導出されたキーを返します。
   返される値は、ハッシュのバイナリ文字列であり、
   ASCII でエンコードされた文字列ではありませんし、
   ハッシュを生成するために使われた追加のパラメータも含まれていません。
   よって、将来パスワードを検証するためには、
   それらの情報を保持しておく必要があります。
   そうなることを避けるために、
   <function>sodium_crypto_pwhash_str</function> を使って下さい。
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>sodium_crypto_pwhash</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
//Need to keep the salt if we're ever going to be able to check this password
$salt = random_bytes(SODIUM_CRYPTO_PWHASH_SALTBYTES);
//Using bin2hex to keep output readable
echo bin2hex(
    sodium_crypto_pwhash(
        16, // == 128 bits
        'password',
        $salt,
        SODIUM_CRYPTO_PWHASH_OPSLIMIT_INTERACTIVE,
        SODIUM_CRYPTO_PWHASH_MEMLIMIT_INTERACTIVE,
        SODIUM_CRYPTO_PWHASH_ALG_ARGON2ID13
    )
);
?>]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
a18f346ba57992eb7e4ae6abf3fd30ee
]]>
    </screen>
   </example>
  </para> 
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
