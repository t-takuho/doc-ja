<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 27dcb487a7e9c0f04559522a6d2aacf860d622cd Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi,mumumu -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>アサーションの値を調べる</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>assertion</parameter></methodparam>
   <methodparam choice="opt"><type class="union"><type>Throwable</type><type>string</type><type>null</type></type><parameter>description</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> は expectation の定義を満たします。すなわち、
   開発環境やテスト環境では有効であるが、
   運用環境では除去されて、まったくコストのかからないアサーションということです。
  </para>
  <para>
   アサーションは、デバッグ目的にのみ使用するべきです。
   アサーションを常に &true; となる条件を調べる不具合診断に使用し、
   true でない場合に何らかのプログラミングエラーを示したり、
   extension 関数または特定のシステム制限や機能といった、
   特定の機能の存在をチェックするために使用することが可能です。
  </para>
  <para>
   アサーションは削除するように設定できるため、
   入力パラメータのチェックのような通常の実行動作に使用するべきでは
   <emphasis>ありません</emphasis>。
   一般的には、アサーションのチェックを無効にしてもそのコードが正常に動作しなければなりません。
  </para>
  <para>
   <function>assert</function> は
   <parameter>assertion</parameter> で指定された
   expectation をチェックします。
   それを満たさない場合、この関数の結果は &false; になり、
   <function>assert</function> の設定に応じて適切な動作をします。
  </para>

  <para>
   <function>assert</function> の振る舞いは、以下のINI設定によって制御できます:
   <table>
    <title>Assert &ConfigureOptions;</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>&Name;</entry>
       <entry>&Default;</entry>
       <entry>&Description;</entry>
       <entry>&Changelog;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry><link linkend="ini.zend.assertions">zend.assertions</link></entry>
       <entry><literal>1</literal></entry>
       <entry>
        <simplelist>
         <member>
          <literal>1</literal>: コードを生成して実行する (開発モード)
         </member>
         <member>
          <!-- TODO: look up the RFC to figure out why you'd want this -->
          <literal>0</literal>: コードを生成するが、実行時には読み飛ばす
         </member>
         <member>
          <literal>-1</literal>: コードを生成しない (運用モード)
         </member>
        </simplelist>
       </entry>
       <entry/>
      </row>
      <row>
       <entry><link linkend="ini.assert.active">assert.active</link></entry>
       <entry>&true;</entry>
       <entry>
        &false; を指定すると、
        <function>assert</function> は expectation をチェックせず、
        無条件に &true; を返します。
       </entry>
       <entry>
        PHP 8.3.0 以降は非推奨
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.callback">assert.callback</link></entry>
       <entry>&null;</entry>
       <entry>
        <para>
         アサーションが失敗した時にコールされるユーザー定義の関数。
         シグネチャは以下の形であるべきです:
         <methodsynopsis role="procedural">
          <type>void</type><methodname>assert_callback</methodname>
          <methodparam><type>string</type><parameter>file</parameter></methodparam>
          <methodparam><type>int</type><parameter>line</parameter></methodparam>
          <methodparam><type>null</type><parameter>assertion</parameter></methodparam>
          <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
         </methodsynopsis>
        </para>
       </entry>
       <entry>
        <para>
         PHP 8.0.0 より前のバージョンでは、
         コールバックのシグネチャは以下の形であるべきでした:
         <methodsynopsis role="procedural">
          <type>void</type><methodname>assert_callback</methodname>
          <methodparam><type>string</type><parameter>file</parameter></methodparam>
          <methodparam><type>int</type><parameter>line</parameter></methodparam>
          <methodparam><type>string</type><parameter>assertion</parameter></methodparam>
          <methodparam choice="opt"><type>string</type><parameter>description</parameter></methodparam>
         </methodsynopsis>
        </para>
        <simpara>
         PHP 8.3.0 以降は非推奨
        </simpara>
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.exception">assert.exception</link></entry>
       <entry>&true;</entry>
       <entry>
        &true; を指定すると、expectation を満たさない場合に
        <classname>AssertionError</classname> がスローされます。
       </entry>
       <entry>
        PHP 8.3.0 以降は非推奨
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.bail">assert.bail</link></entry>
       <entry>&false;</entry>
       <entry>
        &true; を指定すると、expectation を満たさない場合に
        PHP スクリプトの実行を停止します。
       </entry>
       <entry>
        PHP 8.3.0 以降は非推奨
       </entry>
      </row>
      <row>
       <entry><link linkend="ini.assert.warning">assert.warning</link></entry>
       <entry>&true;</entry>
       <entry>
        &true; を指定すると、expectation を満たさない場合に
        <constant>E_WARNING</constant> が発生します。
        このINI設定は
        <link linkend="ini.assert.exception">assert.exception</link>
        が有効な場合は意味がありません。
       </entry>
       <entry>
        PHP 8.3.0 以降は非推奨
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>assertion</parameter></term>
     <listitem>
      <para>
       値を返すあらゆる式を指定できます。
       この式を実行した結果を用いて、アサーションに成功したか否かを判断します。
      </para>

      <warning>
       <para>
        PHP 8.0.0 より前のバージョンでは、
        <parameter>assertion</parameter> に文字列を指定すると、
        PHP コードとして解釈され、
        <function>eval</function> 経由で実行されていました。
        この文字列はコールバックの3番目の引数として渡されていました。
        この振る舞いは PHP 7.2.0 以降では
        <emphasis>非推奨</emphasis> になり、
        PHP 8.0.0 で <emphasis>削除されました</emphasis>。
       </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>description</parameter></term>
     <listitem>
      <para>
       <parameter>description</parameter> が
       <classname>Throwable</classname> のインスタンスの場合、
       <parameter>assertion</parameter> が実行され、
       かつ失敗した場合にスローされます。
       <note>
        <para>
         PHP 8.0.0 以降では、
         定義済みのアサーションのコールバックがコールされる
         <emphasis>前</emphasis> に上の処理は行われます。
        </para>
       </note>
       <note>
        <para>
         PHP 8.0.0 以降では、
         <link linkend="ini.assert.exception">assert.exception</link>
         の設定に関わらず、&object; がスローされます。
        </para>
       </note>
       <note>
        <para>
         例外がスローされる場合、
         PHP 8.0.0 以降では、
         <link linkend="ini.assert.bail">assert.bail</link>
         は意味がありません。
        </para>
       </note>
      </para>
      <para>
       <parameter>description</parameter> が文字列の場合、
       例外や警告が発生した場合にここで指定したメッセージを使います。
       <parameter>assertion</parameter>
       が失敗したときのオプションのメッセージを指定します。
      </para>
      <para>
       <parameter>description</parameter> は省略できます。
       <!-- This does not happen if &null; is passed ... -->
       デフォルトの値は、<function>assert</function>
       を呼び出したソースコードと同じです。この値はコンパイル時に生成されます。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>assert</function> は、以下のうちのひとつが当てはまる場合、常に &true; を返します:
  </para>
  <simplelist>
   <member><literal>zend.assertions=0</literal></member>
   <member><literal>zend.assertions=-1</literal></member>
   <member><literal>assert.exception=1</literal></member>
   <member><literal>assert.bail=1</literal></member>
   <member>カスタムの例外オブジェクトが <parameter>description</parameter> に渡された場合</member>
  </simplelist>
  <para>
   上記の条件がすべて当てはまらない場合でも、
   <parameter>assertion</parameter> が真と評価できる値であれば &true; を返します。
   そうでない場合、&false; を返します。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.0</entry>
       <entry>
        すべての <literal>assert.</literal> INI 設定は、推奨されなくなりました。
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <function>assert</function> は、文字列の引数を評価しなくなりました。
        代わりに、他の引数と同じ扱いをされるようになっています。
        <code>assert('$a == $b')</code> ではなく、<code>assert($a == $b)</code>
        を使うべきです。 &php.ini; ディレクティブ 
        <literal>assert.quiet_eval</literal> と定数
        <constant>ASSERT_QUIET_EVAL</constant> も削除されており、
        それらを使っても何も起きなくなっています。
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>description</parameter> が
        <classname>Throwable</classname> のインスタンスの場合、
        assertion が失敗した場合、
        <link linkend="ini.assert.exception">assert.exception</link>
        の値に関わらず、&object; がスローされるようになりました。
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>description</parameter>が
        <classname>Throwable</classname> のインスタンスの場合、
        たとえ設定されていてもコールバックは呼び出されません。
       </entry>
      </row>
      <row>
       <entry>8.0.0</entry>
       <entry>
        名前空間の内部で、<literal>assert()</literal>
        という名前の関数を宣言することはできなくなりました。
        宣言した場合、<constant>E_COMPILE_ERROR</constant> が発生します。
       </entry>
      </row>
      <row>
       <entry>7.3.0</entry>
       <entry>
        名前空間の内部で、<literal>assert()</literal>
        という名前の関数を宣言することは推奨されなくなりました。
        宣言した場合、 E_DEPRECATED が発生するようになっています。 
       </entry>
      </row>
      <row>
       <entry>7.2.0</entry>
       <entry>
        <parameter>assertion</parameter> に &string;
        を使うことは推奨されなくなりました。
        <link linkend="ini.assert.active">assert.active</link>
        と <link linkend="ini.zend.assertions">zend.assertions</link>
        が両方 <literal>1</literal> に設定されると
        <constant>E_DEPRECATED</constant>
        レベルの警告が発生するようになりました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
   <example>
    <title><function>assert</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(1 > 2);
echo 'Hi!';
]]>
    </programlisting>
    <para>
     アサーションが有効になっている (<link linkend="ini.zend.assertions"><literal>zend.assertions=1</literal></link>) 場合は、上の例の結果は次のようになります:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: assert(1 > 2) in example.php:2
Stack trace:
#0 example.php(2): assert(false, 'assert(1 > 2)')
#1 {main}
  thrown in example.php on line 2
]]>
    </screen>
    <para>
     アサーションが無効になっている (<literal>zend.assertions=0</literal> または <literal>zend.assertions=-1</literal>) 場合は、上の例の結果は次のようになります:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
   </example>
   <example>
    <title>カスタムのメッセージを使う</title>
    <programlisting role="php">
<![CDATA[
<?php
assert(1 > 2, "Expected one to be greater than two");
echo 'Hi!';
]]>
    </programlisting>
    <para>
     アサーションが有効になっている場合は、上の例の結果は次のようになります:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught AssertionError: Expected one to be greater than two in example.php:2
Stack trace:
#0 example.php(2): assert(false, 'Expected one to...')
#1 {main}
  thrown in example.php on line 2
]]>
    </screen>
    <para>
     アサーションが無効になっている場合は、上の例の結果は次のようになります:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
   </example>
   <example>
    <title>カスタムの例外クラスを使う</title>
    <programlisting role="php">
<![CDATA[
<?php
class ArithmeticAssertionError extends AssertionError {}

assert(1 > 2, new ArithmeticAssertionError("Expected one to be greater than two"));
echo 'Hi!';
]]>
    </programlisting>
    <para>
     アサーションが有効になっている場合は、上の例の結果は次のようになります:
    </para>
    <screen>
<![CDATA[
Fatal error: Uncaught ArithmeticAssertionError: Expected one to be greater than two in example.php:4
Stack trace:
#0 {main}
  thrown in example.php on line 4
]]>
    </screen>
    <para>
     アサーションが無効になっている場合は、上の例の結果は次のようになります:
    </para>
    <screen>
<![CDATA[
Hi!
]]>
    </screen>
   </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>assert_options</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
