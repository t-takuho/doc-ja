<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 46a9cdd2dbef4ec89bf65fad9930e2feb78bbb98 Maintainer: takagi Status: ready -->

<book xml:id="book.wincache" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <?phpdoc extension-membership="pecl" ?>
 <title>PHP 用の Windows キャッシュ</title>
 <titleabbrev>WinCache</titleabbrev>

 <preface xml:id="intro.wincache">
  &reftitle.intro;
  <para>
   Windows Cache Extension for PHP は、PHP のアクセラレータです。
   Windows および Windows サーバー上での PHP アプリケーションの動作速度を向上させます。
   Windows Cache Extension for PHP を有効にして PHP エンジンに読み込むと、
   PHP アプリケーションのコードに一切手を加えずに恩恵を受けることができます。
  </para>
  <para>
   Windows Cache Extension には 5 種類のキャッシュが含まれています。
   それぞれのキャッシュ型の目的と利点を以下にまとめました。
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <emphasis>PHP Opcode キャッシュ</emphasis> - PHP はスクリプト処理エンジンです。
     テキストや PHP の命令からなるデータストリームを入力として読み込み、
     別の形式 (通常は HTML 形式) のデータストリームを生成します。
     つまり、ウェブクライアントからのリクエストを受け取るたびに、
     PHP エンジンが PHP スクリプトの読み込みとパース、コンパイルそして実行を行っているわけです。
     読み込み、パースそしてコンパイルはウェブサーバーの CPU やファイルシステムに負荷をかけ、
     PHP ウェブアプリケーション全体のパフォーマンスに影響を及ぼします。
     PHP バイトコード (opcode) キャッシュを使うと、コンパイル済みのスクリプトのバイトコードを共有メモリに置きます。
     同じスクリプトが再びリクエストされたときには、PHP エンジンはこのバイトコードを再利用します。
    </para>
    <para>
     opcode キャッシングのサポートは、<literal>Wincache 2.0.0</literal> で削除されました。
     opcache を所有したいすべてのユーザーは、PHP に含まれる
     <link linkend="book.opcache">OPcache</link> 拡張を使用すべきです。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>ファイルキャッシュ</emphasis> - PHP opcode のキャッシュを有効にしたとしても、
     PHP エンジンはファイルシステム上のスクリプトファイルにアクセスしなければなりません。
     PHP のスクリプトをリモートの UNC ファイル共有に置いている場合には、
     ファイル操作はパフォーマンス面での深刻なオーバーヘッドとなります。
     Windows Cache Extension for PHP にはファイルキャッシュ機能が組み込まれており、
     PHP スクリプトファイルの内容を共有メモリに格納することができます。
     これにより、PHP エンジンからのファイルシステム操作の量を減らすことができます。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>ファイルパス解決キャッシュ</emphasis> - PHP スクリプトでは、
     相対ファイルパス指定によるファイル操作やインクルードが頻繁に発生します。
     このとき、PHP エンジンは相対パスを絶対パスに変換しなければなりません。
     PHP のアプリケーションで、相対パス指定した PHP ファイルへのアクセスが多くなると、
     パスの解決がアプリケーションのパフォーマンスに大きな影響を及ぼします。
     Windows Cache Extension for PHP のファイルパス解決キャッシュを使うと、
     相対パスと絶対パスの対応を保存しておくことができます。
     これにより、PHP エンジンが行わなければならないパス解決の量を減らすことができます。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>ユーザーキャッシュ (バージョン 1.1.0 以降で使用可能)</emphasis> -
     ユーザーキャッシュ API を使うと、PHP スクリプトから共有メモリキャッシュを使うことができます。
     PHP のオブジェクトや変数をユーザーキャッシュに格納し、
     別のリクエストでそれを再利用することができるのです。
     これは PHP スクリプトのパフォーマンスを向上させ、
     複数の PHP プロセスからのデータへのアクセスを共有することができます。
    </para>
   </listitem>
   <listitem>
    <para>
     <emphasis>セッションハンドラ (バージョン 1.1.0 以降で使用可能)</emphasis> -
     WinCache セッションハンドラを使うと、PHP のセッションデータを共有メモリキャッシュに置くことができます。
     セッションデータの読み書き時のファイルシステム操作が不要になり、
     大量のデータを PHP セッションに格納するときのパフォーマンスが向上します。
    </para>
   </listitem>
  </itemizedlist>
 </preface>

 &reference.wincache.setup;
 &reference.wincache.reference;
 &reference.wincache.win32build;

</book>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

