<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: e8df7102cc38808bd5e559580ef20424c4861ac6 Maintainer: hirokawa Status: ready -->
<!-- CREDITS: takagi -->
<refentry xml:id="function.socket-recv" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>socket_recv</refname>
  <refpurpose>接続したソケットからデータを受信する</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>socket_recv</methodname>
   <methodparam><type>Socket</type><parameter>socket</parameter></methodparam>
   <methodparam><type class="union"><type>string</type><type>null</type></type><parameter role="reference">data</parameter></methodparam>
   <methodparam><type>int</type><parameter>length</parameter></methodparam>
   <methodparam><type>int</type><parameter>flags</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>socket_recv</function> 関数は、
   <parameter>socket</parameter> から
   <parameter>length</parameter> バイトのデータを受信して
   <parameter>data</parameter> に格納します。
   <function>socket_recv</function> を使うと、
   接続したソケットからデータを収集することができます。
   さらに、フラグを指定して関数の挙動を変更することもできます。
  </para>
  <para>
   <parameter>data</parameter> は参照渡しなので、
   引数リストには変数で渡さなければなりません。
   <parameter>socket</parameter> から <function>socket_recv</function>
   で読み込んだデータが <parameter>data</parameter> に入ります。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       <parameter>socket</parameter> は、事前に
       <function>socket_create</function> で作成した <classname>Socket</classname> クラスのインスタンスでなければなりません。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>data</parameter></term>
     <listitem>
      <para>
       受信したデータが、
       <parameter>data</parameter> で指定した変数に格納されます。
       エラーが発生したり接続がリセットされたりデータが存在しなかったりした場合は、
       <parameter>data</parameter> には &null; が設定されます。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       最大 <parameter>length</parameter> バイトまでをリモートホストから取得します。
      </para>
     </listitem>
    </varlistentry>

    <varlistentry>
     <term><parameter>flags</parameter></term>
     <listitem>
      <para>
       <parameter>flags</parameter> の値は、次のフラグを論理 OR
       (<literal>|</literal>) 演算子で組み合わせたものとなります。
      </para>
      
      <table>
       <title><parameter>flags</parameter> のとりうる値</title>
       <tgroup cols="2">
        <thead>
         <row>
          <entry>フラグ</entry>
          <entry>説明</entry>
         </row>
        </thead>
        <tbody>
         <row>
          <entry><constant>MSG_OOB</constant></entry>
          <entry>
           out-of-band を処理します。
          </entry>
         </row>
         <row>
          <entry><constant>MSG_PEEK</constant></entry>
          <entry>
           受信キューの先頭からデータを取得し、受信したデータをキューから削除しません。
          </entry>
         </row>
         <row>
          <entry><constant>MSG_WAITALL</constant></entry>
          <entry>
           最低 <parameter>length</parameter> バイト受信するまでブロックします。
           しかし、シグナルを受け取ったりリモートホストが接続を切断したりした場合は、
           この関数が返すデータがそれより少なくなる可能性があります。
          </entry>
         </row>
         <row>
          <entry><constant>MSG_DONTWAIT</constant></entry>
          <entry>
           このフラグを設定すると、正常にブロックされている状態でも関数が結果を返します。
          </entry>
         </row>
        </tbody>
       </tgroup>
      </table>
     </listitem>
    </varlistentry>    
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>socket_recv</function> は、受信したバイト数を返します。
   エラーが発生した場合は &false; を返します。
   実際のエラーコードを取得するには
   <function>socket_last_error</function> をコールします。
   このエラーコードを <function>socket_strerror</function>
   に渡すと、エラーに関する説明テキストを取得することができます。
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <informaltable>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>&Version;</entry>
      <entry>&Description;</entry>
     </row>
    </thead>
    <tbody>
     &sockets.changelog.socket-param;
    </tbody>
   </tgroup>
  </informaltable>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>socket_recv</function> の例</title>
    <para>
     この例は、
     <xref linkend="sockets.examples"/> の最初の例を書き換えて
     <function>socket_recv</function> を使う形式にしたものです。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
error_reporting(E_ALL);

echo "<h2>TCP/IP Connection</h2>\n";

/* WWW サービスのポートを取得します */
$service_port = getservbyname('www', 'tcp');

/* 対象となるホストの IP アドレスを取得します */
$address = gethostbyname('www.example.com');

/* TCP/IP ソケットを作成します */
$socket = socket_create(AF_INET, SOCK_STREAM, SOL_TCP);
if ($socket === false) {
    echo "socket_create() failed: reason: " . socket_strerror(socket_last_error()) . "\n";
} else {
    echo "OK.\n";
}

echo "Attempting to connect to '$address' on port '$service_port'...";
$result = socket_connect($socket, $address, $service_port);
if ($result === false) {
    echo "socket_connect() failed.\nReason: ($result) " . socket_strerror(socket_last_error($socket)) . "\n";
} else {
    echo "OK.\n";
}

$in = "HEAD / HTTP/1.1\r\n";
$in .= "Host: www.example.com\r\n";
$in .= "Connection: Close\r\n\r\n";
$out = '';

echo "Sending HTTP HEAD request...";
socket_write($socket, $in, strlen($in));
echo "OK.\n";

echo "Reading response:\n\n";
$buf = 'This is my buffer.';
if (false !== ($bytes = socket_recv($socket, $buf, 2048, MSG_WAITALL))) {
    echo "Read $bytes bytes from socket_recv(). Closing socket...";
} else {
    echo "socket_recv() failed; reason: " . socket_strerror(socket_last_error($socket)) . "\n";
}
socket_close($socket);

echo $buf . "\n";
echo "OK.\n\n";
?>
]]>
    </programlisting>
    <para>
     上の例の出力は、このようになります。
    </para>
    <screen>
<![CDATA[
<h2>TCP/IP Connection</h2>
OK.
Attempting to connect to '208.77.188.166' on port '80'...OK.
Sending HTTP HEAD request...OK.
Reading response:

Read 123 bytes from socket_recv(). Closing socket...HTTP/1.1 200 OK
Date: Mon, 14 Sep 2009 08:56:36 GMT
Server: Apache/2.2.3 (Red Hat)
Last-Modified: Tue, 15 Nov 2005 13:24:10 GMT
ETag: "b80f4-1b6-80bfd280"
Accept-Ranges: bytes
Content-Length: 438
Connection: close
Content-Type: text/html; charset=UTF-8

OK.
]]>
    </screen>
   </example>
  </para>
 </refsect1>
                     
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
