<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: bbfa9738785f054752e6cb565cd0a58e71015bc6 Maintainer: takagi Status: ready -->
<chapter  xml:id="ev.watchers" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>ウォッチャー</title>
 <para>
  ウォッチャーは、何らかのイベントに関する興味を記録するオブジェクトです。
  たとえば次のコードは、
  <constant>STDIN</constant> が読み込み可能になるまで待ちます。
  <programlisting role="php">
<![CDATA[
<?php
// STDIN が読み込み可能になるまで待ちます
$w = new EvIo(STDIN, Ev::READ, function ($watcher, $revents) {
 echo "STDIN is readable\n";
});
Ev::run(Ev::RUN_ONCE);
?>
]]>
  </programlisting>
 </para>
 <para>
  すべてのウォッチャーのコンストラクタが、自動的にウォッチャーを開始します。
  <literal>createStopped</literal> メソッドを使う
  (<methodname>EvIo::createStopped</methodname> など)
  と、停止状態のウォッチャーを作れます。
 </para>
 <para>
  ウォッチャーオブジェクトを破棄するときには、自動的にウォッチャーが停止することに注意しましょう。
  したがって、コンストラクタやファクトリーメソッドが返すオブジェクトはずっと維持する必要があります。
 </para>
 <para>
  また、ウォッチャーのプロパティ
  (<emphasis>set</emphasis> や <varname>priority</varname> etc.)
  を変更するすべてのメソッドは、自動的にウォッチャーを停止して
  アクティブになったら立ち上げなおすことにも注意しましょう。
  つまり、未処理のイベントは失われてしまいます。
 </para>
 <para>
  <link linkend="ev.watcher-callbacks">ウォッチャーのコールバック</link>
  も参照ください。
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
