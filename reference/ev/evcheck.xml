<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 33e5f4ef7243bc1282acb1cba93e8f99c1debe68 Maintainer: takagi Status: ready -->
<reference xml:id="class.evcheck" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 <title>EvCheck クラス</title>
 <titleabbrev>EvCheck</titleabbrev>
 <partintro>
<!-- {{{ EvCheck intro -->
  <section xml:id="evcheck.intro">
   &reftitle.intro;
   <para>
    <classname>EvPrepare</classname> ウォッチャーと
    <classname>EvCheck</classname> ウォッチャーは、
    通常はペアで使います。
    <classname>EvPrepare</classname>
    ウォッチャーはプロセスをブロックする前に起動し、
    <classname>EvCheck</classname>
    はブロックした後に起動します。
   </para>
   <para>
    <methodname>EvLoop::run</methodname>
    あるいはそれに類するメソッドや関数 (現在のイベントループに入るもの)
    は、<classname>EvPrepare</classname> ウォッチャーや
    <classname>EvCheck</classname> ウォッチャーからは呼べません。
    現在のループ以外のループは問題ありません。
    その理由は、これらのウォッチャーの中では再帰をチェックする必要がないからです。
    つまり、処理の流れは常に <classname>EvPrepare</classname>
    -&gt; ブロック -&gt; <classname>EvCheck</classname>
    となるので、これらのウォッチャーは常にペアで呼ばれ、ブロッキング呼び出しの前後を囲むことになります。
   </para>
   <para>
    主な利用目的は他のイベント機構を <emphasis>libev</emphasis> に統合することで、
    少し高度な使いかたになります。変数の変更を追跡したり
    自前のウォッチャーを実装したり、net-snmp やコルーチンライブラリを統合したりといった、
    さまざまな用途で使えます。
    また、何らかのデータをキャッシュしてブロッキングの前にフラッシュするなどの用途で使えることもあります。
   </para>
   <para>
    <classname>EvCheck</classname> には最高の優先度
    (<constant>Ev::MAXPRI</constant>) を与えることを推奨します。
    これで、ポーリングの後は他のあらゆるウォッチャーよりも先に実行されることが保証されます
    (<classname>EvPrepare</classname> ウォッチャーの場合は無鐘鋳です)。
   </para>
   <para>
    また、<classname>EvCheck</classname>
    ウォッチャーはイベントをアクティブにしたり送信したりしてはいけません。
    <emphasis>libev</emphasis> では対応してはいますが、
    他の <classname>EvCheck</classname> ウォッチャーが仕事をする前に実行される可能性があります。
   </para>
  </section>
<!-- }}} -->
  <section xml:id="evcheck.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass>
     <classname>EvCheck</classname>
    </ooclass>
<!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>EvCheck</classname>
     </ooclass>
     <ooclass>
      <modifier>extends</modifier>
      <classname>EvWatcher</classname>
     </ooclass>
    </classsynopsisinfo>
<!-- }}} -->
<!--<classsynopsisinfo role="comment">&Properties;</classsynopsisinfo>-->
    <classsynopsisinfo role="comment">&InheritedProperties;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('evwatcher.synopsis')/descendant::db:fieldsynopsis)" />
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evcheck')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[not(@role='procedural')])"/>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evcheck')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[not(@role='procedural')])"/>
    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.evwatcher')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
<!-- }}} -->
  </section>
 </partintro>

 &reference.ev.entities.evcheck;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
