<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: bbfa9738785f054752e6cb565cd0a58e71015bc6 Maintainer: takagi Status: ready -->
<chapter  xml:id="ev.watcher-callbacks" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>ウォッチャーのコールバック</title>
 <para>
  すべてのウォッチャーは、アクティブ (イベントを待ち受け中)
  あるいは非アクティブ (一時停止) の状態になります。
  コールバックを実行できるのは、アクティブなウォッチャーだけです。
  すべてのコールバックは、少なくとも二つの引数を付けて呼ばれます。
  <parameter>watcher</parameter> (ウォッチャー)、そして
  <parameter>revents</parameter> (受け取ったイベントのビットマスク) です。
 </para>
 <para>
  ウォッチャーのコールバックは、ウォッチャーのコンストラクタ
  (<classname>EvWatcher</classname> の派生クラス。
  <methodname>EvCheck::__construct</methodname> や
  <methodname>EvChild::__construct</methodname> など)
  に渡します。コールバックは、次のプロトタイプにしたがわなければいけません。
 </para>
 <methodsynopsis>
  <type>void</type>
  <methodname>callback</methodname>
  <methodparam
   choice="opt">
   <type>object</type>
   <parameter>watcher</parameter>
   <initializer>NULL</initializer>
  </methodparam>
  <methodparam
   choice="opt">
   <type>int</type>
   <parameter>revents</parameter>
   <initializer>NULL</initializer>
  </methodparam>
 </methodsynopsis>
 <para>
  <variablelist>
   <varlistentry>
    <term>
     <parameter>watcher</parameter>
    </term>
    <listitem>
     <para>
      <classname>EvWatcher</classname> を継承したクラスのインスタンス。
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term>
     <parameter>revents</parameter>
    </term>
    <listitem>
     <para>
      <link linkend="ev.constants.watcher-revents">ウォッチャーが受信したイベント</link>
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
 <para>
  ウォッチャーの型によって、
  <parameter>revents</parameter> に関連するビットが割り当てられています。
  そのため、複数のウォッチャーに対して同じコールバックを使えます。
  イベントのマスクは、イベントの型にちなんだ名前になっています。たとえば
  <classname>EvChild</classname> (あるいは <methodname>EvLoop::child</methodname>)
  は <constant>EV::CHILD</constant>、
  <classname>EvPrepare</classname> (あるいは <methodname>EvLoop::prepare</methodname>)
  は <constant>Ev::PREPARE</constant>、
  <classname>EvPeriodic</classname> (あるいは <methodname>EvLoop::periodic</methodname>)
  は <constant>Ev::PERIODIC</constant>
  などです。ただ I/O のイベントは例外で、これは
  <constant>Ev::READ</constant> と <constant>Ev::WRITE</constant>
  の両方のビットを設定します。
 </para>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
