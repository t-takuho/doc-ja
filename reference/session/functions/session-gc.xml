<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: be8baf89c0016c1c39ab0b85cafca28c8364e95b Maintainer: satoruyoshida Status: ready -->
<!-- Credits: mumumu -->
<refentry xml:id="function.session-gc" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>session_gc</refname>
  <refpurpose>セッションデータのガベージコレクションを実行する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type class="union"><type>int</type><type>false</type></type><methodname>session_gc</methodname>
   <void/>
  </methodsynopsis>
  <para>
   <function>session_gc</function> は、セッションデータの GC (ガベージコレクション)
   を実行するために使用されます。PHPは、デフォルトで確率ベースのセッション GC を行います。
  </para>
  <para>
   確率ベースの GC は多少は機能しますが、いくつかの問題があります。
   1) トラフィックが少ないサイトのセッションデータは、優先期間内に削除されないことがあります。
   2) トラフィックの多いサイトでは、GC が頻繁になる可能性があります。
   3) ユーザーの要求の際に GC が実行され、ユーザーは GC 遅延を感じます。
  </para>
  <para>
   そのため、例えば UNIX 系のシステムでは「cron」を使用して、
   本稼動システムに対して定期的に GC を実行することをお勧めします。
   <link linkend="ini.session.gc-probability">session.gc_probability</link> を 0 に設定して、
   確率ベースのGCを無効にしてください。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  &no.function.parameters;
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>session_gc</function> は、
   成功時には削除されたセッションデータの数、
   失敗時には &false; を返します。
  </para>
  <para>
   古いセーブハンドラは、削除されたセッションデータの数を返さず、成功/失敗フラグのみを返します。
   この場合、実際に削除されたデータにかかわらず、削除されたセッションデータの数は 1 になります。
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>cron のようなタスクマネージャでの <function>session_gc</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 注 : このスクリプトは、Web サーバープロセスと同じユーザーで実行される必要があります。

// セッションデータストレージアクセスを初期化するには、アクティブセッションが必要です。
session_start();

// 直ちに GC を実行します
session_gc();

// session_gc() によって作成されたセッション ID をクリーンアップします
session_destroy();
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>ユーザーがアクセス可能なスクリプトでの <function>session_gc</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 注 : session_gc() は、タスクマネージャスクリプトで使用することをお勧めしますが、次のように使用できます。

// 最後の GC 時間チェックに使用
$gc_time = '/tmp/php_session_last_gc';
$gc_period = 1800;

session_start();
// GC 期限が経過したときにのみ GC を実行します。 
// つまり、リクエストのたびに session_gc() をコールすることはリソースの無駄です。
if (file_exists($gc_time)) {
    if (filemtime($gc_time) < time() - $gc_period) {
        session_gc();
        touch($gc_time);
    }
} else {
    touch($gc_time);
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>session_start</function></member>
    <member><function>session_destroy</function></member>
    <member><link linkend="ini.session.gc-probability">session.gc_probability</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
