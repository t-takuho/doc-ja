<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: daf4cc624df3c21d472149725feb377b1beedb04 Maintainer: takagi Status: ready -->
<!-- CREDITS: hirokawa,mumumu -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   結果セットから次の行を取得する
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>mode</parameter><initializer>PDO::FETCH_DEFAULT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOrientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursorOffset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   PDOStatementオブジェクトに関連付けられた結果セットから1行取得します。
   <parameter>mode</parameter> パラメータは、PDO
   がその行をどの様に返すかを決定します。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>mode</parameter></term>
     <listitem>
      <para>
       次のレコードを呼び出し元に返す方法を制御します。
       この値は、<literal>PDO::FETCH_*</literal> 定数のどれかで、
       デフォルトは <constant>PDO::ATTR_DEFAULT_FETCH_MODE</constant> の値
       (そのデフォルトは <constant>PDO::FETCH_BOTH</constant>) です。
       <itemizedlist>
        <listitem><para>
         <literal>PDO::FETCH_ASSOC</literal>: は、結果セットに
         返された際のカラム名で添字を付けた配列を返します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOTH</literal> (デフォルト):
         結果セットに返された際のカラム名と
         0 で始まるカラム番号で添字を付けた配列を返します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOUND</literal>:
         &true; を返し、結果セットのカラムの値を
         <methodname>PDOStatement::bindColumn</methodname>
         メソッドでバインドされた PHP 変数に代入します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_CLASS</literal>:
         結果セットのカラムがクラス内の名前付けされたプロパティに
         マッピングされている、要求されたクラスの新規インスタンスを返します。
         <literal>PDO::FETCH_PROPS_LATE</literal> を指定していない限りは、
         カラムをマッピングしてからクラスのコンストラクタを呼び出します。
         <parameter>mode</parameter> に PDO::FETCH_CLASSTYPE が
         含まれている場合 (例: <literal>PDO::FETCH_CLASS |
         PDO::FETCH_CLASSTYPE</literal>) は、最初のカラムの値から
         クラス名を決定します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_INTO</literal>:
         結果セットのカラムがクラス内の名前付けされたプロパティに
         マッピングされている要求された既存インスタンスを更新します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_LAZY</literal>:
         <literal>PDO::FETCH_BOTH</literal> と<literal>PDO::FETCH_OBJ</literal>の
         組合せで、アクセスされるオブジェクトプロパティ名を作成する <classname>PDORow</classname> オブジェクトを返します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NAMED</literal>:
         <literal>PDO::FETCH_ASSOC</literal> と同じ形式の配列を返します。
         ただし、同じ名前のカラムが複数あった場合は、そのキーが指す値は、
         同じ名前のカラムのすべての値を含む配列になります。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NUM</literal>:
         結果セットに返された際の 0
         から始まるカラム番号を添字とする配列を返します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_OBJ</literal>:
         結果セットに返された際のカラム名と同名のプロパティを有する
         匿名のオブジェクトを返します。
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_PROPS_LATE</literal>:
         <literal>PDO::FETCH_CLASS</literal> とともに使用すると、
         まずクラスのコンストラクタを呼び出してから、カラムの値をプロパティに代入します。
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOrientation</parameter></term>
     <listitem>
      <para>
       スクロール可能なカーソルを表す PDOStatement オブジェクトの場合、
       この値により呼び出し側に返される行を定義します。
       この値は、<literal>PDO::FETCH_ORI_*</literal> 定数のどれかと
       する必要があり、
       <literal>PDO::FETCH_ORI_NEXT</literal> がデフォルトとなっています。
       PDOStatement に対してスクロール可能なカーソルを要求するためには、
       <methodname>PDO::prepare</methodname> を用いて SQL ステートメントを
       準備する際、
       <literal>PDO::CURSOR_SCROLL</literal> に
       <literal>PDO::ATTR_CURSOR</literal> 属性を設定する必要があります。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursorOffset</parameter></term>
     <listitem>
      <para> 
       スクロール可能なカーソルを表すPDOStatementオブジェクトの場合で、
        <parameter>cursorOrientation</parameter> パラメータが
       <literal>PDO::FETCH_ORI_ABS</literal>に設定された場合、この値により
       取得される結果セットの行の絶対位置が指定されます。
      </para>
      <para>
       スクロール可能なカーソルを表すPDOStatementオブジェクトの場合で、
       <parameter>cursorOrientation</parameter> パラメータが
       <literal>PDO::FETCH_ORI_REL</literal>に設定された場合、この値は、
       <methodname>PDOStatement::fetch</methodname> がコールされる前のカーソルの
       位置を基準として取得する行の位置を指定します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   この関数が成功した場合の戻り値は、取得形式によって異なります。
   失敗した場合、または行が残っていない場合は、常に &false; を返します。
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>異なる取得方法で行を取得する</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Exercise PDOStatement::fetch styles */
print "PDO::FETCH_ASSOC: ";
print "Return next row as an array indexed by column name\n";
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print "\n";

print "PDO::FETCH_BOTH: ";
print "Return next row as an array indexed by both column name and number\n";
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print "\n";

print "PDO::FETCH_LAZY: ";
print "Return next row as a PDORow object with column names as properties\n";
$result = $sth->fetch(PDO::FETCH_LAZY);
print $result->name;
print "\n";

print "PDO::FETCH_OBJ: ";
print "Return next row as an anonymous object with column names as properties\n";
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->NAME;
print "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Return next row as an array indexed by column name
Array
(
    [name] => apple
    [colour] => red
)

PDO::FETCH_BOTH: Return next row as an array indexed by both column name and number
Array
(
    [name] => banana
    [0] => banana
    [colour] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Return next row as a PDORow object with column names as properties
PDORow Object
(
    [name] => orange
    [colour] => orange
)

PDO::FETCH_OBJ: Return next row as an anonymous object with column names as properties
kiwi
]]>
    </screen>
   </example>
   <example><title>スクロール可能なカーソルで行を取得する</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    }
}
function readDataBackwards($dbh) {
    $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
        $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
        print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
}

print "Reading forwards:\n";
readDataForwards($conn);

print "Reading backwards:\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Reading forwards:
21    10    5
16    0     5
19    20    10

Reading backwards:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>

   <example><title>構築の順序</title>
    <simpara>
     <literal>PDO::FETCH_CLASS</literal> でオブジェクトを取得するときには、
     まずオブジェクトのプロパティへの代入を終えてから、そのクラスのコンストラクタを実行します。
     <literal>PDO::FETCH_PROPS_LATE</literal> を指定した場合はこの順序が逆転します。
     つまり、まずコンストラクタを呼び出してから、プロパティへの代入を行います。
    </simpara>
    <programlisting role="php">
<![CDATA[
<?php
class Person
{
    private $name;

    public function __construct()
    {
        $this->tell();
    }

    public function tell()
    {
        if (isset($this->name)) {
            echo "I am {$this->name}.\n";
        } else {
            echo "I don't have a name yet.\n";
        }
    }
}

$sth = $dbh->query("SELECT * FROM people");
$sth->setFetchMode(PDO::FETCH_CLASS, 'Person');
$person = $sth->fetch();
$person->tell();
$sth->setFetchMode(PDO::FETCH_CLASS|PDO::FETCH_PROPS_LATE, 'Person');
$person = $sth->fetch();
$person->tell();
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
I am Alice.
I am Alice.
I don't have a name yet.
I am Bob.
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::fetchAll</methodname></member>
    <member><methodname>PDOStatement::fetchColumn</methodname></member>
    <member><methodname>PDOStatement::fetchObject</methodname></member>
    <member><methodname>PDOStatement::setFetchMode</methodname></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
