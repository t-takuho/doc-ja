<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 9f30ccc6aa0dabe411c52305202fe85209ddc06b Maintainer: hirokawa Status: ready -->
<!-- CREDITS: shimooka -->
<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>指定した変数の割当を解除する</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam rep="repeat"><type>mixed</type><parameter>vars</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> は指定した変数を破棄します。
  </para>
  <para>
   関数 <function>unset</function> の内部動作は、
   破棄しようとする変数の型に依存します。
  </para>
  <para>
   あるグローバル変数が関数の中で <function>unset</function>
   された場合、ローカル変数のみが破棄されます。呼出側の環境にある変数は、
   <function>unset</function> がコールされる前と同じ値を保持します。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function destroy_foo() 
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destroy_foo();
echo $foo;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
bar
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   グローバル変数を関数の内部で <function>unset</function> するには、
   <varname>$GLOBALS</varname> 配列を使います。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
    unset($GLOBALS['bar']);
}

$bar = "something";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   参照渡しされた変数が関数内で <function>unset</function> された場合に、
   ローカル変数のみが破棄されます。呼出側の環境でその変数は、
   <function>unset</function> がコールされる前と同じ値を保持します。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar) 
{
    unset($bar);
    $bar = "blah";
}

$bar = 'something';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
something
something
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   static変数が関数の内部で <function>unset</function> された場合、
   <function>unset</function> は、その関数の残りのコンテキスト内においてのみ
   変数を破棄します。関数を再度コールすると、破棄する前の値が復元されます。
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Before unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "after unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
   &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
Before unset: 1, after unset: 23
Before unset: 2, after unset: 23
Before unset: 3, after unset: 23
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       破棄する変数。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>vars</parameter></term>
     <listitem>
      <para>
       別の変数。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>unset</function> の例</title>
    <programlisting role="php">
<![CDATA[
<?php
// 変数を一つ破棄する
unset($foo);

// 配列の要素の一つを破棄する
unset($bar['quux']);

// 複数の変数を破棄する
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title><literal>(unset)</literal> によるキャスト</title>
    <para>
     <link linkend="language.types.null.casting"><literal>(unset)</literal></link> によるキャストは
     <function>unset</function> 関数と混同されがちです。
     <literal>(unset)</literal> によるキャストは、
     単に <literal>NULL</literal> 型へのキャストを徹底するだけであり、
     キャストした変数の値を書き換えるわけではありません。
     (unset) によるキャストは、PHP 7.2.0 で非推奨になり、
     PHP 8.0.0 で削除されました。
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$name = 'Felipe';

var_dump((unset) $name);
var_dump($name);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
string(6) "Felipe"
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    現在のコンテキストで見えるものであれば、
    オブジェクトのプロパティも破棄することが可能です。
   </para>
   <para>
    破棄されたプロパティにアクセスする場合、
    もし宣言されていれば <link linkend="object.get">__get()</link>
    がコールされます。
    破棄されたプロパティに値を設定を設定する場合、
    もし宣言されていれば <link linkend="object.set">__set()</link>
    がコールされます。
   </para>
  </note>
  <note>
   <para>
    オブジェクトのメソッド内で
    <literal>$this</literal> を破棄することはできません。
   </para>
  </note>
  <note>
   <para>
    オブジェクトのアクセス不能なプロパティに対して <function>unset</function>
    を使用した場合は、もしオーバーロードメソッド
    <link linkend="object.unset">__unset()</link>
    が宣言されていればそれをコールします。
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><link linkend="object.unset">__unset()</link></member>
    <member><function>array_splice</function></member>
    <member><link linkend="language.types.null.casting">(unset) casting</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
