<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8deee9585d9c8485493e35bcb7dde61b29c30854 Maintainer: mumumu Status: ready -->

<chapter xml:id="mysql-xdevapi.examples" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.examples;
 <para>
  X DevAPI の中心的なエントリポイントは、
  <function>mysql_xdevapi\getSession</function> 関数です。
  これは MySQL 8.0 サーバーへの URI を受取り、
  <classname>mysql_xdevapi\Session</classname> オブジェクトを返します。
 </para>
 <example>
  <title>MySQL Serverへの接続</title>
  <programlisting role="php">
<![CDATA[
<?php
try {
    $session = mysql_xdevapi\getSession("mysqlx://user:password@host");
} catch(Exception $e) {
    die("Connection could not be established: " . $e->getMessage());
}
 
// ... use $session
?>
]]>
  </programlisting>
 </example>
 <para>
  セッションは、API への完全なアクセスを提供します。
  新しい MySQL サーバーをインストールした後の最初のステップは、
  データを保存するために、コレクションを使ってデータベースのスキーマを作ることです:
 </para>
 <example>
  <title>MySQL サーバー上で、スキーマとコレクションを作る</title>
  <programlisting role="php">
<![CDATA[
<?php
$schema = $session->createSchema("test");
$collection = $schema->createCollection("example");
?>
]]>
  </programlisting>
 </example>
 <para>
  データを保存する際には、
  <function>json_encode</function> 関数を使い、データを JSON にエンコードします。
  JSON はコレクションに保存するのに使います。
 </para>
 <para>
  次の例は、既に述べた例で作ったコレクションにデータを保存します。
  そして、その一部を再度取得します。
 </para>
 <example>
  <title>データを保存し、取得する</title>
  <programlisting role="php">
<![CDATA[
<?php
$marco = [
  "name" => "Marco",
  "age"  => 19,
  "job"  => "Programmer"
];
$mike = [
  "name" => "Mike",
  "age"  => 39,
  "job"  => "Manager"
];

$schema = $session->getSchema("test");
$collection = $schema->getCollection("example");

$collection->add($marco, $mike)->execute();

var_dump($collection->find("name = 'Mike'")->execute()->fetchOne());
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
   <![CDATA[
array(4) {
  ["_id"]=>
  string(28) "00005ad66aaf0000000000000003"
  ["age"]=>
  int(39)
  ["job"]=>
  string(7) "Manager"
  ["name"]=>
  string(4) "Mike"
}
]]>
  </screen>
 </example>
 <para>
  この例では、文書へのプライマリーキーの役割を果たす
  <code>_id</code> という追加フィールドを MySQL サーバーが追加していることを示しています。
 </para>
 <para>
  さらにこの例は、取得したデータがアルファベット順にソートされていることも示しています。
  この特定の並び順は、MySQL サーバー内の効率的なバイナリストレージから来ていますが、
  それに依存すべきではありません。詳細は、MySQL の JSON データ型のドキュメントを参照ください。
 </para>
 <para>
  オプションで、複数の文書を取得するのに、PHP のイテレータが使えます。
 </para>
 <example>
  <title>複数の文書を取得し、それを走査する</title>
  <programlisting role="php">
<![CDATA[
<?php
$result = $collection->find()->execute();
foreach ($result as $doc) {
  echo "{$doc["name"]} is a {$doc["job"]}.\n";
}
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
   <![CDATA[
Marco is a Programmer.
Mike is a Manager.
]]>
  </screen>
 </example>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
