<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: d4b762e22e53d959330b53674b73841cfff4dddf Maintainer: takagi Status: ready -->
<!-- CREDITS: shimooka,mumumu -->
<refentry xml:id="function.spl-autoload-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>spl_autoload_register</refname>
  <refpurpose>指定した関数を __autoload() の実装として登録する</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>spl_autoload_register</methodname>
   <methodparam choice="opt"><type class="union"><type>callable</type><type>null</type></type><parameter>callback</parameter><initializer>&null;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>throw</parameter><initializer>&true;</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>prepend</parameter><initializer>&false;</initializer></methodparam>
  </methodsynopsis>
  <para>
   指定した関数を、spl が提供する __autoload キューに登録します。
   キューがまだアクティブになっていない場合は、まずアクティブにします。
  </para>
  <para>
   もしあなたのコード中に <function>__autoload</function> 関数が存在するのなら、
   それを明示的に __autoload キューに登録しなければなりません。
   なぜなら、<function>spl_autoload_register</function> は、
   <function>spl_autoload</function> あるいは <function>spl_autoload_call</function> によって
   <function>__autoload</function> 関数のエンジンキャッシュを効率的に置き換えるからです。
  </para>
  <para>
   複数の autoload 関数が必要となる場合でも <function>spl_autoload_register</function>
   は対応できます。この関数は autoload 関数のキューを作成し、
   定義された順にそれを実行していきます。一方
   <function>__autoload</function> は、一度しか定義できません。
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       登録したい autoload 関数。
       &null; を指定した場合、デフォルト実装である
       <function>spl_autoload</function> が登録されます。
      </para>
      <methodsynopsis>
       <type>void</type><methodname><replaceable>callback</replaceable></methodname>
       <methodparam><type>string</type><parameter>class</parameter></methodparam>
      </methodsynopsis>
      <para>
       <parameter>class</parameter> には、完全修飾子を示す、先頭のバックスラッシュが付くことはありません。
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>throw</parameter></term>
     <listitem>
      <para>
       このパラメータは、
       <function>spl_autoload_register</function>
       が <parameter>callback</parameter>
       を登録できなかったときに例外をスローするかどうかを指定します。
      </para>
      <warning>
        <para>
         このパラメータは、PHP 8.0.0 以降は無視されます。
         かつ、&false; を設定すると警告が発生します。
         <function>spl_autoload_register</function> は、
         引数が不正な場合常に <classname>TypeError</classname>
         をスローするようになっています。
        </para>
      </warning>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>prepend</parameter></term>
     <listitem>
      <para>
       &true; の場合、<function>spl_autoload_register</function>
       はキューの最後に追加するのではなく先頭に追加します。
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.0.0</entry>
       <entry>
        <parameter>callback</parameter> は、nullable になりました。
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>spl_autoload_register</function> を <function>__autoload</function> 関数の代わりに使う例</title>
    <programlisting role="php">
<![CDATA[
<?php

// function __autoload($class) {
//     include 'classes/' . $class . '.class.php';
// }

function my_autoloader($class) {
    include 'classes/' . $class . '.class.php';
}

spl_autoload_register('my_autoloader');

// あるいは、無名関数も使えます
spl_autoload_register(function ($class) {
    include 'classes/' . $class . '.class.php';
});

?>
]]>
    </programlisting>
   </example>
   <example>
    <title><function>spl_autoload_register</function> でクラスをロードしない例</title>
    <programlisting role="php">
<![CDATA[
<?php

namespace Foobar;

class Foo {
    static public function test($class) {
        print '[['. $class .']]';
    }
}

spl_autoload_register(__NAMESPACE__ .'\Foo::test');

new InexistentClass;

?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
[[Foobar\InexistentClass]]
Fatal error: Class 'Foobar\InexistentClass' not found in ...
]]>
    </screen>
   </example>
   <example>
    <title>識別子には先頭のバックスラッシュが付かない</title>
    <programlisting role="php">
<![CDATA[
<?php

spl_autoload_register(static function ($class) {
    var_dump($class);
});

class_exists('RelativeName');
class_exists('RelativeName\\WithNamespace');
class_exists('\\AbsoluteName');
class_exists('\\AbsoluteName\\WithNamespace');

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(12) "RelativeName"
string(26) "RelativeName\WithNamespace"
string(12) "AbsoluteName"
string(26) "AbsoluteName\WithNamespace"
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>__autoload</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
