<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 14767af0f05dffa6fdb9b49e1a1f4e9ca7022a60 Maintainer: takagi Status: ready -->
<reference xml:id="class.recursivecallbackfilteriterator" role="class" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">

 <title>RecursiveCallbackFilterIterator クラス</title>
 <titleabbrev>RecursiveCallbackFilterIterator</titleabbrev>

 <partintro>

<!-- {{{ RecursiveCallbackFilterIterator intro -->
  <section xml:id="recursivecallbackfilteriterator.intro">
   &reftitle.intro;
   <para>

   </para>
  </section>
<!-- }}} -->

  <section xml:id="recursivecallbackfilteriterator.synopsis">
   &reftitle.classsynopsis;

<!-- {{{ Synopsis -->
   <classsynopsis class="class">
    <ooclass>
     <classname>RecursiveCallbackFilterIterator</classname>
    </ooclass>

    <ooclass>
     <modifier>extends</modifier>
     <classname>CallbackFilterIterator</classname>
    </ooclass>

    <oointerface>
     <modifier>implements</modifier>
     <interfacename>RecursiveIterator</interfacename>
    </oointerface>

    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:constructorsynopsis[@role='RecursiveCallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.recursivecallbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='RecursiveCallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>

    <classsynopsisinfo role="comment">&InheritedMethods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.callbackfilteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='CallbackFilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.filteriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='FilterIterator'])">
     <xi:fallback/>
    </xi:include>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.iteratoriterator')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[@role='IteratorIterator'])">
     <xi:fallback/>
    </xi:include>
   </classsynopsis>
<!-- }}} -->

  </section>

  <!-- {{{ examples -->
  <section xml:id="recursivecallbackfilteriterator.examples">
   &reftitle.examples;
   <para>
    コールバックは、三つの引数を受け付けなければなりません。
    それぞれ、現在のアイテム、現在のキー、そしてイテレータを表します。
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.args">
    <title>利用可能なコールバック引数</title>
    <programlisting role="php">
<![CDATA[
<?php

/**
 * RecursiveCallbackFilterIterator 用のコールバック
 *
 * @param $current   現在のアイテムの値
 * @param $key       現在のアイテムのキー
 * @param $iterator  フィルタリングするイテレータ
 * @return boolean   現在のアイテムを受け付ける場合は TRUE、それ以外の場合は FALSE
 */
function my_callback($current, $key, $iterator) {
    // ここにフィルタリングのコードを書きます
}

?>
]]>
    </programlisting>
   </example>
   <para>
    再帰イテレータのフィルタリングにはふたつの条件があります。
    まず最初は再帰を許可するかどうかです。コールバック関数は、
    現在のイテレータのアイテムが子を持つときに &true; を返さなければなりません。
    二番目の条件が通常のフィルタリング条件で、
    次の例におけるファイルサイズや拡張子のチェックがこれにあたります。
   </para>
   <example xml:id="recursivecallbackfilteriterator.examples.basic">
    <title>再帰コールバックの基本例</title>
<programlisting role="php">
<![CDATA[
<?php

$dir = new RecursiveDirectoryIterator(__DIR__);

// 大きなファイル ( > 100MB) をフィルタします
$files = new RecursiveCallbackFilterIterator($dir, function ($current, $key, $iterator) {
    // 再帰を許可します
    if ($iterator->hasChildren()) {
        return TRUE;
    }
    // 巨大なファイルのチェックをします
    if ($current->isFile() && $current->getSize() > 104857600) {
        return TRUE;
    }
    return FALSE;
});
 
foreach (new RecursiveIteratorIterator($files) as $file) {
    echo $file->getPathname() . PHP_EOL;
}

?>
]]>
    </programlisting>
   </example>
  </section>
  <!-- }}} -->

 </partintro>

 &reference.spl.entities.recursivecallbackfilteriterator;

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
