<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: f4c44b86948f70a7e89f582b500e2595452e00f0 Maintainer: satoruyoshida Status: ready -->
<!-- Credits: mumumu -->
<chapter xml:id="oci8.dtrace" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>OCI8 および DTrace 動的トレーシング</title>
 <para>
  OCI8 2.0 では、DTrace をサポートする OS 上で使用できる
  静的な DTrace プローブが導入されました。
  PHP および DTrace の概要については、<link
   linkend="features.dtrace">DTrace 動的トレーシング</link> をご覧ください。
 </para>

<section>
 <title>DTrace サポート付きで OCI8 をインストール</title>
  <para>
   PHP OCI8 で DTrace のサポートを有効にするには、
   <literal>PHP_DTRACE</literal> を設定後、
   OCI8 を共用拡張モジュールとしてビルドします。
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
$ export PHP_DTRACE=yes
$ pecl install oci8
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   php.ini を編集し、作成された <filename>oci8.so</filename> がある
   ディレクトリを <link linkend="ini.extension-dir">extension_dir</link> に
   設定します。
   さらに以下のように追加してその拡張モジュールを有効にします。
  </para>
  <para>
   <informalexample>
    <screen>
<![CDATA[
extension=oci8.so
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   もし、<filename>phpize</filename> および <filename>configure</filename> を
   （ <filename>pecl</filename> の代わりに）
   使用して PECL から PHP OCI8 をインストールする場合、
   さらに <literal>PHP_DTRACE=yes</literal> を設定する必要があります。
   それは、<literal>--enable-dtrace</literal> オプションが、PECL バンドルの
   制限された <filename>configure</filename> スクリプトにより
   無視されるからです。
  </para>

  <para>
   一般的な PECL インストール手順については、<link
    linkend="install.pecl">PECL 拡張モジュールのインストール</link>
   をご覧ください。
  </para>
 </section>

 <section>
  <title>PHP OCI8 の DTrace 静的プローブ</title>
  <table>
   <title>PHP OCI8 では、以下の静的プローブが使用できます</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>プローブ名</entry>
      <entry>プローブの説明</entry>
      <entry>プローブの引数</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>oci8-connect-entry</literal></entry>
      <entry>oci_connect()、oci_pconnect() および oci_new_connect() により開始されます。データベース接続が確立する前に発射されます。</entry>
      <entry>char *<varname>username</varname>, char *<varname>dbname</varname>, char *<varname>charset</varname>, long <varname>session_mode</varname>, int <varname>persistent</varname>, int <varname>exclusive</varname></entry>
     </row>
     <row>
      <entry><literal>oci8-connect-return</literal></entry>
      <entry>接続終了時に発射されます。</entry>
      <entry>void *<varname>connection</varname></entry>
     </row>
     <row>
      <entry><literal>oci8-check-connection</literal></entry>
      <entry>Oracle のエラーにより、接続が不正になったかもしれない場合に発射されます。</entry>
      <entry>void *<varname>connection</varname>, char *<varname>client_id</varname>, int <varname>is_open</varname>, long <varname>errcode</varname>, unsigned long <varname>server_status</varname></entry>
     </row>
     <row>
      <entry><literal>oci8-sqltext</literal></entry>
      <entry>oci_parse() が実行された際に発射されます。</entry>
      <entry>void *<varname>connection</varname>, char *<varname>client_id</varname>, void *<varname>statement</varname>, char *<varname>sql</varname></entry>
     </row>
     <row>
      <entry><literal>oci8-connection-close</literal></entry>
      <entry>データベースへの接続が完全に破壊された際に発射されます。</entry>
      <entry>void *<varname>connection</varname></entry>
     </row>
     <row>
      <entry><literal>oci8-error</literal></entry>
      <entry>Oracle のエラーが生じた場合に発射されます。</entry>
      <entry>int <varname>status</varname>, long <varname>errcode</varname></entry>
     </row>
     <row>
      <entry><literal>oci8-execute-mode</literal></entry>
      <entry>実行モードを示す <function>oci_execute</function> のたびに発射されます。</entry>
      <entry>void *<varname>connection</varname>, char *<varname>client_id</varname>, void *<varname>statement</varname>, unsigned int <varname>mode</varname></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   これらのプローブは、OCI8 スクリプトのトレーシングで有用です。
  </para>

  <para>
   <varname>connection</varname> および <varname>statement</varname> は、
   PHP の接続および実行されたステートメントを追跡するために使用される内部構造への
   ポインタです。
  </para>

  <para>
    <varname>client_id</varname> は、
    <function>oci_set_client_identifier</function> により設定される値です。
  </para>

  <para>
  </para>

  <para>
  </para>

  <para>
  </para>


  <para>
   コア PHP にも静的プローブがあります。
   <link linkend="features.dtrace.static-probes">コア PHP の DTrace 静的プローブ</link>
    をご覧ください。
  </para>

  <table>
   <title>OCI8 の DTrace プローブ内部デバッギング</title>
   <tgroup cols="2">
    <thead>
     <row>
      <entry>プローブ名</entry>
     </row>
    </thead>
    <tbody>
     <row>
      <entry><literal>oci8-connect-expiry</literal></entry>
     </row>
     <row>
      <entry><literal>oci8-connect-lookup</literal></entry>
     </row>
     <row>
      <entry><literal>oci8-connect-p-dtor-close</literal></entry>
     </row>
     <row>
      <entry><literal>oci8-connect-p-dtor-release</literal></entry>
     </row>
     <row>
      <entry><literal>oci8-connect-type</literal></entry>
     </row>
     <row>
      <entry><literal>oci8-sesspool-create</literal></entry>
     </row>
     <row>
      <entry><literal>oci8-sesspool-stats</literal></entry>
     </row>
     <row>
      <entry><literal>oci8-sesspool-type</literal></entry>
     </row>
    </tbody>
   </tgroup>
  </table>
  <para>
   これらのプローブは、OCI8 メンテナにとって有用です。
   引数およびいつ発射されるかについては、OCI8 のソースコードを参照ください。
  </para>
 </section>

 <section>
  <title>PHP OCI8 の DTrace 静的プローブ一覧</title>
  <para>
   使用できるプローブを一覧表示するには、
   PHP プロセスを開始して以下のように実行します。
   <informalexample>
    <programlisting>
<![CDATA[
# dtrace -l
]]>
    </programlisting>
   </informalexample>
  </para>
  
  <para>
   出力は以下のようになります。
   <informalexample>
    <programlisting>
<![CDATA[
   ID   PROVIDER            MODULE                          FUNCTION NAME
   [ . . . ]
   17 phpoci22116           oci8.so   php_oci_dtrace_check_connection oci8-check-connection
   18 phpoci22116           oci8.so                php_oci_do_connect oci8-connect-entry
   19 phpoci22116           oci8.so         php_oci_persistent_helper oci8-connect-expiry
   20 phpoci22116           oci8.so             php_oci_do_connect_ex oci8-connect-lookup
   21 phpoci22116           oci8.so  php_oci_pconnection_list_np_dtor oci8-connect-p-dtor-close
   22 phpoci22116           oci8.so  php_oci_pconnection_list_np_dtor oci8-connect-p-dtor-release
   23 phpoci22116           oci8.so                php_oci_do_connect oci8-connect-return
   24 phpoci22116           oci8.so             php_oci_do_connect_ex oci8-connect-type
   25 phpoci22116           oci8.so          php_oci_connection_close oci8-connection-close
   26 phpoci22116           oci8.so                     php_oci_error oci8-error
   27 phpoci22116           oci8.so         php_oci_statement_execute oci8-execute-mode
   28 phpoci22116           oci8.so              php_oci_create_spool oci8-sesspool-create
   29 phpoci22116           oci8.so            php_oci_create_session oci8-sesspool-stats
   30 phpoci22116           oci8.so            php_oci_create_session oci8-sesspool-type
   31 phpoci22116           oci8.so          php_oci_statement_create oci8-sqltext
]]>
    </programlisting>
   </informalexample>
  </para>

   <para>
    PROVIDER 列の値は、<literal>phpoci</literal> および
    現在実行中の PHP プロセスのプロセス ID から構成されます。
   </para>

   <para>
    FUNCTION 列は、各プロバイダが配置された PHP 内部の C 実装関数名を参照します。
   </para>

   <para>
    PHP プロセスが実行されていない場合、PHP プローブは表示されません。
   </para>
 </section>

 <section>
  <title>PHP OCI8 についての DTrace の例</title>
  <para>
   この例では、DTrace の D スクリプト言語の基本を示します。
   <example>
    <title>DTrace を使用して
    すべてのユーザーレベルの PHP OCI8 静的プローブをトレースするための
     <filename>user_oci8_probes.d</filename></title>
    <programlisting>
<![CDATA[
#!/usr/sbin/dtrace -Zs

#pragma D option quiet

php*:::oci8-connect-entry
{
    printf("%lld: PHP connect-entry\n", walltimestamp);
    printf("  credentials=\"%s@%s\"\n", arg0 ? copyinstr(arg0) : "", arg1 ? copyinstr(arg1) : "");
    printf("  charset=\"%s\"\n", arg2 ? copyinstr(arg2) : "");
    printf("  session_mode=%ld\n", (long)arg3);
    printf("  persistent=%d\n", (int)arg4);
    printf("  exclusive=%d\n", (int)arg5);
}

php*:::oci8-connect-return
{
    printf("%lld: PHP oci8-connect-return\n", walltimestamp);
    printf("  connection=0x%p\n", (void *)arg0);
}

php*:::oci8-connection-close
{
    printf("%lld: PHP oci8-connect-close\n", walltimestamp);
    printf("  connection=0x%p\n", (void *)arg0);
}

php*:::oci8-error
{
    printf("%lld: PHP oci8-error\n", walltimestamp);
    printf("  status=%d\n", (int)arg0);
    printf("  errcode=%ld\n", (long)arg1);
}

php*:::oci8-check-connection
{
    printf("%lld: PHP oci8-check-connection\n", walltimestamp);
    printf("  connection=0x%p\n", (void *)arg0);
    printf("  client_id=\"%s\"\n", arg1 ? copyinstr(arg1) : "");
    printf("  is_open=%d\n", arg2);
    printf("  errcode=%ld\n", (long)arg3);
    printf("  server_status=%lu\n", (unsigned long)arg4);
}

php*:::oci8-sqltext
{
    printf("%lld: PHP oci8-sqltext\n", walltimestamp);
    printf("  connection=0x%p\n", (void *)arg0);
    printf("  client_id=\"%s\"\n", arg1 ? copyinstr(arg1) : "");
    printf("  statement=0x%p\n", (void *)arg2);
    printf("  sql=\"%s\"\n", arg3 ? copyinstr(arg3) : "");
}

php*:::oci8-execute-mode
{
    printf("%lld: PHP oci8-execute-mode\n", walltimestamp);
    printf("  connection=0x%p\n", (void *)arg0);
    printf("  client_id=\"%s\"\n", arg1 ? copyinstr(arg1) : "");
    printf("  statement=0x%p\n", (void *)arg2);
    printf("  mode=0x%x\n", arg3);
}
]]>
    </programlisting>
   </example>
  </para>

  <para>
   このスクリプトは、<filename>dtrace</filename> に対して
   <literal>-Z</literal> オプションを使用します。
   それにより、実行中の PHP プロセスがない場合に実行できるようになります。
   もしこのオプションが書き落とされた場合、
   モニターされているプローブがどれも存在しないことがわかっているので、
   PHP の実行可能ファイルが実行されていない場合、
   スクリプトは即座に終了します。
  </para>

  <para>
   マルチ CPU マシンでは、プローブの順序は規則的に連続して表示されないことがあります。
   これは、どの CPU がプローブを処理し、
   CPU の間をスレッドがどのように移動したかに依存します。
   プローブのタイムスタンプを表示すると、
   混乱を減らすことができます。
  </para>

  <para>
   スクリプトは、PHP スクリプト実行中の期間全体にわたって、
   すべてのユーザーレベルの PHP OCI8 静的プローブ・ポイントをトレースします。
   D スクリプトを実行します。
   <informalexample>
    <programlisting>
<![CDATA[
# ./user_oci8_probes.d
]]>
    </programlisting>
   </informalexample>
  </para>

  <para>
   PHP スクリプトまたはアプリケーションを実行します。
   モニタリングの D スクリプトは、各プローブが発射されるたびに
   その引数を出力します。
   例えば、テーブルを照会する単純な PHP スクリプトにより
   以下のトレース出力がもたらされるでしょう。
   <informalexample>
    <programlisting>
<![CDATA[
1381794982092854582: PHP connect-entry
  credentials="hr@localhost/pdborcl"
  charset=""
  session_mode=0
  persistent=0
  exclusive=0
1381794982183158766: PHP oci8-connect-return
  connection=0x7f4a7907bfb8
1381794982183594576: PHP oci8-sqltext
  connection=0x7f4a7907bfb8
  client_id="Chris"
  statement=0x7f4a7907c2a0
  sql="select * from employees"
1381794982183783706: PHP oci8-execute-mode
  connection=0x7f4a7907bfb8
  client_id="Chris"
  statement=0x7f4a7907c2a0
  mode=0x20
1381794982444344390: PHP oci8-connect-close
  connection=0x7f4a7907bfb8
]]>
    </programlisting>
   </informalexample>
  </para>
  
  <para>
   モニタリングが完了した際には、<keycombo action='simul'><keycap>CTRL</keycap><keycap>C</keycap></keycombo> を使用して
   D スクリプトを終わらせることができます。
  </para>

 </section>

 <section>
  &reftitle.seealso;
  <simplelist>
   <member><link linkend="features.dtrace">DTrace 動的トレーシング</link></member>
  </simplelist>
 </section>

</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

